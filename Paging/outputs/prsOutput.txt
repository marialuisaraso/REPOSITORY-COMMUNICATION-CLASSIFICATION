{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'support to log null and undefined to the repl from an extension', 'body': 'This will fix issue #9 \n'}, {'title': 'Languageconf fixes', 'body': ''}, {'title': 'VSCODE', 'body': ''}, {'title': 'Fixed Runnning typo', 'body': 'Changed Runnning to Running. \n'}, {'title': 'Fix typo particpate -> participate', 'body': ':)\n'}, {'title': 'Fix small typo', 'body': 'Fixes small typo.\nThanks for all the great work on VS Code :relaxed:\n'}, {'title': 'choice of tool --> type of tool', 'body': ''}, {'title': 'Add text/ng-template to the HTML mime types', 'body': "Added `'text/ng-template'` to the HTML mime types to enable HTML highlighting/help in Angular templates within `<script>` blocks\n"}, {'title': 'Changed the adapters separation from "," to "and"', 'body': ''}, {'title': 'Fix grunt task detector retrieving task names improperly', 'body': 'I had noticed before an anomaly in the detector of grunt task names, which was recording words that were not actually tasks. The root of the problem is that the grunt CLI wraps description lines if they are too long (at around column 63 if I\'m not mistaken). This PR fixes the problem by detecting the offset where the description starts (hence where the task name ends) and removing it from each line from then on.\n\nUpdate: officially, grunt tasks are specified in "Gruntfile.js", and not "gruntfile.js". Therefore, I also renamed the file name on the automatic task runner discovery.\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOAwxGAg==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'fix for #39', 'body': 'https://github.com/Microsoft/vscode/issues/39\n'}, {'title': 'Fix bug #103', 'body': "The event source should be set to 'keyboard' when there is no emmet expansion.\nThis change fixes the bug in column counter mentioned in #103 \n"}, {'title': 'Proxy support for extensions #69', 'body': "The extension installation doesn't use the `http.proxy` settings, so this PR fixes this.\n\nCloses #69 Proxy support for extension gallery\n"}, {'title': 'Center screenshot in README', 'body': 'Github does not center the screenshot when using `align="middle"` inside `<img>`.\n'}, {'title': 'Small changes to improve document readabilty', 'body': 'Some small changes in the project documents to improve readability and to link to some resources directly.\n'}, {'title': 'Setup Travis CI', 'body': '- [x] Install dependencies\n- [x] Compile\n- [x] Run tests\n'}, {'title': 'One click script for installing on linux', 'body': "This makes an entry of visual studio code in the main menu bar of Linux based Operating systems and gives a one click script to install VSCode to the `/usr/local/vscode` folder, using this script the menu bar can identify that VSCode is a development tool and the users won't have to do the manual stuff which is too boring and frankly ruins the reputation of such an amazing tool, Microsoft just revolutionized the way many write code on Linux, this is a statement which none of us imagined to be hearing ever.\n"}, {'title': 'Add more extensions to built-in PowerShell support', 'body': 'This change adds the .pssc and .psrc file extensions to the built-in\nPowerShell support.\n'}, {'title': 'Add php reserved keyword "yield"', 'body': 'http://php.net/manual/en/reserved.keywords.php\n'}, {'title': 'Update css <length> units used by CSS auto-complete', 'body': "Fixes #289.\n\nI’ve not added the 'q' unit as it isn’t supported by any browser. I’m not sure what VSCode’s policy is about that.\n"}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOAw6hpw==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': "Add 'turn' to <angle> and 'dppx' to <resolution> data types for CSS auto-complete", 'body': 'Fixes #293\n'}, {'title': 'Update css at-rule support for auto-complete', 'body': 'I’ve not included the at-rules that are not yet supported.\n'}, {'title': 'Use default cursor for .git-statusbar-item', 'body': 'Prevent the text selection cursor from showing on .git-statusbar-item. This is\nhappening because there is an &nbsp; being used currently to position the\nelement.\n\nFixes #307\n'}, {'title': "Enable regex's ^, $ and ^$ to be matched in file dialog", 'body': 'Fixes #278\n'}, {'title': 'Fix CSS frequency capitalization', 'body': 'Fixes #315\n'}, {'title': 'loader.js - some few Utilities changement', 'body': 'Hi :)\n\nFor my _first easy commit_ I propose some little changement about the `Utilities` object of the `loader.js` file.\n\nIs it okay?\n'}, {'title': 'Make sure not each provider registers a support', 'body': '- [x] document symbols\n- [x] code lens\n- [x] go to def\n- [x] hover\n'}, {'title': 'When creating a delayer add it to delayers set', 'body': 'If no delayer is found for a given uri, a new delayer was created. However, that delayer was never added to the set of delayers for the uri so if the extension was configured to validate onType, each type event would create a new delayer leading to performance problems.\n'}, {'title': 'JavaScript: Enable ES6 by Default', 'body': '- This tiny commit enables ES6 support for JavaScript files by default, ensuring that VS Code supports popular JavaScript frameworks and modules out of the box.\n- Tests pass, behaviour otherwise unchanged.\n\nCloses #318 \n:ship: @joaomoreno @poteto @wycats\n'}, {'title': 'Use auth tokens for downloading omnisharp builds from GitHub', 'body': "@jrieken Please review.\n\nOur CI builds are failing because Travis constantly hits download count limits when fetching stuff from GitHub. It's possible to use an auth token to mitigate this. We are already using one everywhere else in our build. This enables the same for the OmniSharp bits.\n"}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOAw-BUg==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': "move pulling omnisharp into another script so that it doesn't run whe…", 'body': '…n just compiling\n'}, {'title': 'Add HTML aria attribute autocomplete', 'body': 'Fixes #320 \n\n/cc @aeschli \n\n![aria_autocomplete](https://cloud.githubusercontent.com/assets/2193314/11306012/693175e2-8f64-11e5-8ef4-a64b1597cb6f.png)\n'}, {'title': 'Expose FILE_SAVING event to extensions', 'body': 'Just allows extensions to use workspace.onSavingTextDocument to bind to FileEventType.FILE_SAVING events.\n\nNot sure if there was a reason this event was not exposed to extensions.\n\nMy use case was for an extension that needs to know when a user tries to save a file, even if it fails (Write Protected). \n\nThis change may be superseded by a Pre-Save hook that allows an extension to block saving ( #239 )\n'}, {'title': 'Included some C# Keywords', 'body': '- Included some Clojure Extensions\n- Included one Powershell Extension\n- Included some Csharp Keywords\n- Reorganization of the language.main.js define call (To match the folders order)\n'}, {'title': 'Do not mkdir if saving to drive root (fixes #379)', 'body': "Does a pretty janky check, and only works for windows (not sure if this happens on other OS's)\n\nMay make more sense to check if the first character is \\ or if starts with Letter then Colon.\n\n(fixes #379)\n\nUpdate: Uses fs.stat to check if directory exists... and removes the initial Jank. Should work across OS's\n"}, {'title': 'Noupdate', 'body': ''}, {'title': 'IWorkbenchEditorService dependency for MainThreadOutputService', 'body': 'Allows MainThreadOutputService to be created w/ editorService (fixes #377)\n\nOnly fixes the error. Method for hiding the output window itself does not appear to work.\n'}, {'title': 'Function calls not highlighted in JS', 'body': 'tmTheme files use `meta.function-call` to highlight function calls.\n'}, {'title': "syntax highlighting for c++: 'value' keyword removed.", 'body': "'value' is not a c++ keyword, so I've removed it.\n"}, {'title': '.editorconfig added', 'body': ''}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOAxEQqw==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Delete files not using', 'body': ''}, {'title': 'Remove Zoomout constraint (fixes #430)', 'body': 'As per issue #430, this is re-enabling zoom level < 100%\n\nCurious for the reasoning of not allowing < 100%, as although it may cause blurryness in some cases, it works fine in others. I find the ability to zoomout very useful, as I am sure many other people do.\n\nOn the 1920x1080 and 1920x1200 displays I am using, I do not experience any blurring.\n\nIf there is still a desire to not allow the overall zoom <100%, what are your thoughts on having zooming only affect the editor panel (like Visual Studio)?\n'}, {'title': 'Add ARIA role values and ARIA 1.1 attributes', 'body': "Updates #320 to:\n- Include ARIA 1.1 attributes:\n  - aria-colcount\n  - aria-colindex\n  - aria-colspan'\n  - aria-current\n  - aria-describedat\n  - aria-errormessage\n  - aria-kbdshortcuts\n  - aria-modal\n  - aria-placeholder\n  - aria-roledescription\n  - aria-rowcount\n  - aria-rowindex\n  - aria-rowspan\n- Add the valid values for the role attribute from ARIA 1.1\n  - Widget Roles\n  - Document Structure Roles\n  - Landmark Roles\n\nFor the roles, I started a new line for each category of role so that it easier to see where each starts when maintaining the list. I also hard wrapped in categories with many items to keep same max line lengths as the file. \n"}, {'title': 'Fixes typos in the javascript.contribution', 'body': ''}, {'title': 'Fixed typos', 'body': ''}, {'title': 'Untitled Save As dialog defaults to All Types with blank name ', 'body': 'This fixes issue #450\n\nThis is a UX change so reject if undesired behavior.\n'}, {'title': 'Update HTML highlighting & IntelliSense', 'body': 'HTML syntax highlighting and IntelliSense in CSS were out of sync and somewhat outdated.\n\nRemoved deprecated:\n- acronym\n- big\n- strike\n- tt\n- frame\n- frameset\n- noframes\n- eventsource\n\nAdded from HTML5:\n- bdo\n- data\n- embed\n- main (also added to the HTML IntelliSense)\n- rb, rp, rt, rtc, ruby\n- s\n- source\n- template\n- track\n- u\n- wbr\n\nAdded from HTML5.1 (less stable spec but many have 1 or 2 implementations)\n- svg (also added to CSS IntelliSense)\n- menuitem\n\nAlso updated the CSS transition snippet, which uses the wrong order and has -o- prefix that has not been needed for a long time.\n'}, {'title': 'Fix function keyword syntax', 'body': 'This fixes a longstanding bug highlighting code like:\n\n``` posh\n# This is ok\nTest-Highlight -Something StringValue\n# This is not\nTest-Highlight -TestFunction StringValue\n# and it breaks this:\nTest-Highlight -Something StringValue\n```\n\nI also fixed scope on function names, like:\n\n``` posh\nfunction Test-Thing { Get-Command $VariableName }\n# the function name should be highlighted as above, and both "global"s should be the same...\nfunction global:Test-Thing { Get-Command $global:VariableName }\nFunction LOCAL:Test-Thing { Get-Command $local:VariableName }\nFUNCTION script:Test-Thing { Get-Command $script:VariableName }\n```\n\nSame change as https://github.com/SublimeText/PowerShell/pull/137\n'}, {'title': 'Add Edge to list of browsers', 'body': '…so it can be used to add browser support info in CSS IntelliSense.\n\nFixes #280\n'}, {'title': "mkdirp: don't try to create fs roots", 'body': 'fixes #379\n\n@bpasero please review\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOAxHGhA==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': "Correcting documentation to better match JSDoc's style.", 'body': "Just some style corrections in the existing doc to better match JSDoc's style. Also some typos.\n"}, {'title': 'Run tests in Electron', 'body': ''}, {'title': 'Run tests in Electron', 'body': ''}, {'title': 'Adding option to configure cursor blinking', 'body': 'Aims to solve #460.\n\nThis adds the possibility to change the cursor\'s blink in the config file : \n\n``` json\n    // Controls the cursor blinking animation.\n    "editor.cursorBlinking": "blink"\n```\n\nPossible values are the already implemented `"blink"`, `"visible"` and `"hidden"`.\n'}, {'title': 'Increased the allowed regex search matches to max number value to acc…', 'body': '…omodate high match volumes\n\nThis PR was made to fix issue 496 where there is a limit of 999 match values to a file.\nLink to issue https://github.com/Microsoft/vscode/issues/496\n'}, {'title': 'add the "Sync" command to the command palette as global command', 'body': 'Given this is my Nr. 1 action, would love to not having to always use the mouse to pull down "Sync" from the git viewlet.\n'}, {'title': 'Add "Show Extensions Updates" command', 'body': 'Shows all installed  extensions that have updates available. Can also be accessed by "ext update". This is how it looks like:\n\n![2015-11-24_11-35-22](https://cloud.githubusercontent.com/assets/954102/11369833/a700324e-929f-11e5-8491-00dc2b726c68.png)\nIt is showing just the extensions that are outdated.\n\nI miss this feature, what does the team think about this?\n'}, {'title': 'Fix typo in comment in sample tasks.json.', 'body': ''}, {'title': 'Fix typos in LineCommentCommand comments.', 'body': ''}, {'title': 'Fix typo: return value of AbstractProcess::terminate.', 'body': ''}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOAxNnsg==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Allow to run extension tests from command line and hook up to build', 'body': ''}, {'title': 'Fix #47, add support for comments and brackets for JSX', 'body': '@egamma ping\n'}, {'title': 'Let shouldAutotriggerSuggestImpl always return true, fixes #179', 'body': '@egamma ping\n'}, {'title': 'Typo fixes for src/vs/workbench/services', 'body': ''}, {'title': 'Typo fixes for src/vs/workbench/parts', 'body': ''}, {'title': 'Release/0.10.2', 'body': ''}, {'title': 'add <picture> element to HTML/CSS intellisense and syntax highlighting', 'body': ''}, {'title': 'Joh/fix language features', 'body': 'Fix #360 and #42 and more things. Progress:\n- [x] document symbols\n- [x] code lens\n- [x] definition\n- [x] hover\n- [x] documentHighlight\n- [x] referenceSearch\n- [x] codeActions\n- [x] workspaceSymbols\n- [x] rename\n- [x] formatDocument\n- [x] formatRange\n- [x] formatOnType\n- [x] signatureHelp\n- [x] completions\n- _defer_ expose as **commands**\n'}, {'title': 'Executing a built in command does not wait for it to be executed (fixes #617)', 'body': '@alexandrudima this is for #617, can you please check if it makes sense? The intent is that commands executed via keybinding service properly connect the promises chain.\n\nAfter this change I can execute a command from an extension and it will only complete when the action has completed on the renderer side.\n'}, {'title': '[TypeScript] Bug fixes #297 snippet on method suggest', 'body': '## What is it?\n\nThis is bug fix for #297 related to completion and  also expand completion options.\n## How?\n\n"typescript.useCodeSnippetsOnMethodSuggest" option in settings now have 3 options to pick \n- [ default = lambda, func,  none   ] *\n\nFor signature like\n\n``` typescript\ninterface IDoSomething {\n    getData(url: string,data:{}, callback: (error, result) => void)\n}\n```\n### lambda:\n\nlambda option generate code like below and for ease of use just will keep first 3 letters of each parameters\n\n``` typescript\nvar x: IDoSomething;\nx.getData(url, data, (err, res) => {\n\n    })\n```\n\n_Tab cycle = url, data, { } **lambda body**_\n### func:\n\nfunc option presume user wants to pass function as argument and generate this code\n\n``` typescript\nvar x: IDoSomething;\nx.getData(url, data, callback) \n```\n\n_Tab cycle = url, data, callback_\n### none:\n\njust none ;)\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOAxam3Q==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Scoped git services', 'body': 'Attempt to fix #57\n'}, {'title': 'Scoped git services', 'body': 'Attempt to fix #57\n'}, {'title': 'fix uncaughtException endless loop', 'body': "UncaughtException Event thrown a new Error and  Plugin host process will enter endless loop if uncaughtException occured.\nwe had addLisentener for uncaughtException in bootstrap.js.\nDon't care my grammar mistakes, my English is poor.\n"}, {'title': "[html] Add documentationLabel's for HTML tags", 'body': "Part of #323. Moves the tag data structure away from a simple string[] to a\ncomplex type in preparation for smarter HTML intellisense (#375).\n\nNot sure if localization should be attempted for these because as they're taken directly from the spec which to my knowledge is English only.\n\nAlso note that I removed `keygen` from intellisense since it's deprecated.\n\ncc @aeschli\n"}, {'title': '[css] Add CSS Gradient snippet.', 'body': ''}, {'title': 'Joh/execute command', 'body': ''}, {'title': 'on windows, honor comspec env variable when spawning a shell', 'body': 'PR for issue #597\n'}, {'title': 'Fixes to editorconfig', 'body': '- Define `indent_size` so it will indent properly on VSCode. ([reference](https://github.com/Microsoft/vscode/pull/425#discussion_r45710574))\n- `package.json` always uses 2-space indentation. ([reference](https://github.com/npm/npm/pull/3180#issuecomment-16336516))\n'}, {'title': 'Isidorn/function breakpoints', 'body': 'Adds function breakpoints to VS Code. Still does not talk to adapter.\n'}, {'title': 'JIS Keyboard support for macos', 'body': '#713\n\nIn MacOS, keys of JIS-keyboard are not identified with `keyCode`, for example `Shift+2`(`"`) and `Shift+6`(`&`)  => `Shift+``. So this code uses `keyIdentifier`.\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOAxn9fg==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': '[xml] Add several XML file extensions', 'body': "Sourced from [Atom's list](https://github.com/atom/language-xml/blob/master/grammars/xml.cson), this PR adds a bunch of known XML extensions and removes `.svgz` as it's a compressed format.\n"}, {'title': '[html] Remove dead code in html.ts', 'body': 'PR contains the following changes:\n- Remove `emptyElement` function from html.ts that is duplicated in htmlTags. The html.ts version is never used.\n- Strongly type an array and fix a typo\n- Depend on the htmlTags for knowledge of empty elements, fixing inconsistencies across html.ts and htmlTags.ts.\n'}, {'title': 'Support Windows mutexes', 'body': 'Fixes #822\n'}, {'title': 'Add setting in product.json for customDataDirectory', 'body': 'This setting allows the user to provide a custom directory for extensions, snippets and settings.\nThis is the first step for making vscode a portable application.\n\nrefs #329\n\nFeedback appreciated, feel free to close though :) \n\nNote: Not there is still some stuff in the %appdata% directory; the LocalStorage, GPUCache, DevTools Extensions and a electron settings file\n'}, {'title': 'Fixed mime-type detection because of different capitalization', 'body': 'fixes #770\n'}, {'title': 'Adopt latest Electron build (#826)', 'body': ''}, {'title': '[xml] Add Windows Workflow (.xoml) extension.', 'body': "I don't know if it's a little too obscure; but I tend to always have to patch this file to include the xoml extension so I thought I'd see if you'll accept it upstream.\n"}, {'title': 'Persist zoom settings', 'body': ''}, {'title': 'Joh/commands', 'body': ''}, {'title': 'Party!', 'body': ':tada: \n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOAx3plA==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': "[vb] Syntax Highlighting for Roku's BrightScript Language", 'body': 'BrightScript (.brs) files use the default visual basic syntax highlighting.\n'}, {'title': 'Isidorn/breakpoints verified', 'body': 'All unverified breakpoints are dimmed in color to attract less attention.\nOnce the session starts breakpoints can get verified and turn into a stronger color.\n\nBreakpoints are no longer red, but blue.\n'}, {'title': 'Implementation of issue #950', 'body': 'Fixed #950\n'}, {'title': '[python] Add .gn as a python file extension', 'body': 'GN is a meta-build system that generates NinjaBuild files. GN syntax is a stripped down version of python.\n'}, {'title': 'Fix spelling/punctuation in descriptions of User Settings --> JS Vali…', 'body': 'Minor changes to address some punctuation and spelling mistakes in the JavaScript validation setting descriptions found within User Settings.\n'}, {'title': 'Fix a bug in indenting multiline comments with tabs (issue #348)', 'body': 'Fixed the issue described in #348 in which the lines after the first in a block comment are stripped of leading spaces and are aligned incorrectly\n'}, {'title': '[ruby] Add Gemfile to supported filenames', 'body': 'This adds built-in syntax highlighting support for [Gemfile](http://bundler.io/gemfile.html), a file used for managing Rubygem dependencies.\n'}, {'title': 'Try to render keybindings with their physical labels', 'body': 'Addresses #713 by rendering keybindings labels with keyboard layout awareness\n'}, {'title': 'changes to tackle #703', 'body': ''}, {'title': '[ISSUE #226] Fix debug console word wrapping', 'body': 'Please see Issue 226:\nhttps://github.com/Microsoft/vscode/issues/226\n\nThis fixes the word wrapping in the debug console by adding a word wrap css to the div that contains the input output elements. It also changes the height of the tree row to be inherited.\n\nPlease let me know if there is a better way of changing the height of the div, instead of using an `!important` declaration\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOAyTUQQ==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'issue #527 with optional cursor scroll', 'body': 'This pull request adds support for Ctrl+Up/Down arrows to scroll the viewport by one line height, as asked in issue #527 . This reproduces the behavior in Visual Studio.\n\nAdditionally, the setting "editor.scrollCursorWithLine" was added (defaults to false). When set to true, the caret will be moved up/down along with scrolling. This feature makes it possible for the user to scroll in a document by using keyboard shortcuts while keeping the same number of visible lines before and after the cursor.\n'}, {'title': 'Allow to match on paths in quick open (fixes #1065)', 'body': 'This enables matching on file paths once the pattern includes the platform path separator (slash on mac and linux and backslash on windows).\n'}, {'title': 'Allow building binary on Linux ARM.', 'body': "Allows use `gulp vscode-linux-arm` for building Code [OSS Build] binary.\n\nLooks like most functions works at Ubuntu Wily on ARMv7 Chromebook.\nUsed Node.js version is v4.2.3\n\nBut there is 15 failing tests and I'm not sure if it's related to Node version or ARMv7 cpu: http://pastebin.com/Xuz04H4e\n\nI'll try to investigate that but any help\\suggestions are welcome because I almost haven't experience with Node.js.\n"}, {'title': '[css] Add syntax highlighting for additional CSS units', 'body': 'The additional units can be found here: http://www.w3.org/TR/css3-values/\n\nSpecifically, I referenced the list of units that appear in the [Attribute References](http://www.w3.org/TR/css3-values/#attr-notation) section. The list of units is just before "Example 25".\n\nOne possible point of contention: I capitalized the "H" in "Hz" and "kHz", because that letter is capitalized in every CSS reference example I\'ve seen online (including the page above). This is in contrast to all other CSS units, which are always written in lowercase.\n'}, {'title': 'Suggest cleanup', 'body': '- [x] Cleanup `CompletionItem[][]` mess\n- [x] Create a view model\n- [x] Use tree.refresh\n'}, {'title': 'Add Subword Navigation', 'body': 'This commit adds subword navigation and allows them to be mapped to cursorSubWordRight, deleteSubWordRight and selectSubWordRight with left equivalents. \n'}, {'title': '[ruby] Added .rake extension to use ruby syntax', 'body': 'This PR adds `.rake` file extension into ruby syntax.\n\nP.S. other possible extensions and filenames here,\nhttps://github.com/atom/language-ruby/blob/master/grammars/ruby.cson\n'}, {'title': 'Add an option to hide/show menu bar.', 'body': 'Adding a menu item to the view menu that allows you hide/show the menu bar. If the menu bar is hidden you toggle it on and off with the "Alt" key.\n\nFixes #945 \n'}, {'title': '[xml] Associate .atom with XML', 'body': '.atom feeds (application/atom+xml) are similar to .rss.\n'}, {'title': 'add addApiCommand call which can be found by a doc tool', 'body': ''}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOAygufQ==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Alternative fuzzy searching', 'body': 'This adds a new option to enable fuzzy matching for the picker (= quick open). Implements https://github.com/Microsoft/vscode/issues/968\n'}, {'title': 'Universal installation script and .desktop files added', 'body': "A python script to install VSCode which can run and install on all three (Linux (both x86 and x64), Windows, Darwin (apple)) platforms.\n\nAlso includes a .desktop file so that Linux users may be able to add VSCode to their Applications menu and docks.\n\nTested as working on Windows 10 Home, Pro, Windows 8.1 Home, Ubuntu 15.10 (GNOME and Unity), Kali Linux 2.0. No Apple devices available.\n\nApple's installation script is yet to be implemented since I don't have Apple OSX and don't know anything about how it handles installation.\n\nPS: I hope I did nothing wrong. First code contribution to VSCode.\n"}, {'title': 'Isidorn/extensions statusbar', 'body': 'Merge in the extensions status bar to get feedback\n@stevencl I will merge what I showed yesterday about the status bar. We try it out for a few days and if we are against it I will remove it.\n'}, {'title': 'Joh/commands as api', 'body': 'Will address #913 by giving you a way to document commands in line\n'}, {'title': 'Joh/diag source', 'body': 'Add source to diagnostic object such that user can tell what linter/language service/extension created what error, See #1010 \n'}, {'title': 'Enrich completion item provider', 'body': "Tackles #752 and #202, @joaomoreno @aeschli related unrelated. We have a few short-comings in the new API and that's my proposal, pls review and comment\n"}, {'title': '[editorconfig] Use tab_width instead of indent_size', 'body': 'If `indent_style` is set to tab on editorconfig, the proper value to use in setting indentation size is `tab_width`, as per the [EditorConfig specifications](http://editorconfig.org/):\n\n> For example, tab_width need not be specified unless it differs from the value of indent_size. Also, when indent_style is set to "tab", it may be desirable to leave indent_size unspecified so readers may view the file using their preferred indentation format.\n'}, {'title': 'Move overwriteBefore/overwriteAfter to ISuggestion', 'body': ''}, {'title': 'Implement AddSelectionToAllFindMatchAction command class', 'body': 'This command is bound to "cmd+ctrl+g" by default\n\nFixes https://github.com/Microsoft/vscode/issues/1186\n'}, {'title': '[css] Update css intellisense and css.plist', 'body': 'Had some strange merge issues when trying to keep the repo up to date, and GitHub Desktop started acting funny after OS upgrade, so sorry for the noise in the last couple of commits as I sorted it out.\n\nIncluded in this PR:\n\nFirst part of modernising css.plist:\n- Big update of CSS properties. Should now include most valid CSS properties.\n- Add missing pseudo elements/classes: fullscreen, placeholder and the input pseudo classes\n- Add missing CSS units\n- Add speech media type\n- Fix comments about colours to point to spec and not incorrect info about being non-standard from W3Schools\n\nBig update to css-scheme.xml for CSS intellisense and generate new JSON file:\n- Add Edge browser support info. Mostly complete except some pseudo classes/elements.\n- Update other browser support to be as close as possible to reality. Some still need to be checked\n- Update specs where appropriate\n- Remove old properties and values that no longer exist\n- Add new CSS properties from almost all CSS specs except old unmaintained spec and a couple of others: CSS Logical Properties and Round Display. SVG CSS properties also still need checking and updating. Especially for browser support.\n- Updated some of the descriptions to be more concise and consistent, and add some missing ones\n- Update at-rules: @keyframes and @supports \n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOAy_s7w==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': '[css] Fix linear-gradient() snippet syntax', 'body': '- corrected the unprefixed syntax\n- Moved the -moz- property below the webkit ones, so that all the mid period syntaxes are together and the prefixes follow the recommended webkit -> moz -> ms (not included here) -> o (also not included) -> unprefixed order. \n\nFixes #1219\n'}, {'title': 'Add invokeSnippetForCurrentWord command.', 'body': "Hi guys, thank you for your amazing tool.\n\nHere's the rationale: when typing code and knowing that there is a snippet, the code completion combo actually hinders the typing process.\n\nThis command allows filling in the snippets immediately, by picking the first available potential suggestion that is a snippet, without the full combo autocomplete round trip.\n"}, {'title': 'Fix: Upgrading Extensions Blows Up', 'body': "Fixes #1111\n\n@alexandrudima, would be great to get a second pair of eyes in this, mind reviewing? We can do a live code review in Lync, if you want.\n\nHere are my intended changes:\n- The **extension service** should install each extension to a path containing the extension's version. Example: `.vscode/extensions/joaomoreno.uuid-0.0.2`.\n- The `scanPlugin` call should only return the latest extension version, in case there are multiple versions of the same extension installed, per extension folder (global vs user).\n- The **extension service** should clean up old extension versions in the user's extension folder, on startup. Currently set to run once 5 seconds after startup.\n- The **list extensions** action should only display the latest version of an extension.\n\nThis also needs extensive testing, which I will do through today.\n"}, {'title': 'document.isDirty appears to report false for dirty untitled document (fixes #723)', 'body': ''}, {'title': 'Add a keyboard shortcut to focus on the working files view on the sidebar', 'body': "This adds a keyboard shortcut to focus on the Working Files view in the Explore Viewlet, as requested by issue #435. The shortcut works only if the Explore Viewlet is visible (another option is to open the viewlet even if the sidebar is hidden or another viewlet is visible, but I didn't do that for now).\n\nCurrently I've mapped `Cmd+9` to the shortcut, since `Cmd+0` focuses on the directory explorer view.\n"}, {'title': 'Amend the hint "jsconfig.json-file" to "jsconfig.json file"', 'body': 'Amend the "jsconfig.json-file" to "jsconfig.json file" in diagnostics.ts\n To keep this hint consistence with the explanation in "https://code.visualstudio.com/docs/languages/javascript"\n'}, {'title': 'Changed code.visualstudio.com hyperlink to HTTPS', 'body': 'Was previously HTTP; server automatically redirects to HTTPS, but irritating when using it on a phone as it adds a few seconds of additional loading.\n'}, {'title': '[c++] keyword "noexcept" added', 'body': 'C++11 added keyword "noexcept" to the standard which was missing in the syntax file yet.\n'}, {'title': 'use version 0.1.2 of native-keymap', 'body': 'This will address issue #1463 \n'}, {'title': 'Implementation of editor.action.insertCursorAtEndOfEachSelectedLine', 'body': "Inspired by issue #950 and pull #961\nAt Sublime I'm a big fan of ctrl+l (line select) and ctrl+shift+l (unselect and set multiple cursors at the end of each line selected).\nI've made a VSCode [extension](https://marketplace.visualstudio.com/items/bigous.vscode-multi-line-tricks) with this 2 features about 2 weeks ago... \nBut as the feature of LineSelection was incorporated to the VSCode itself and was released yesterday, I thought it would be nice to have both features at the VSCode itself.\nSo, I've made this little PR to set ctrl+alt+i to this action (sadly ctrl+l is used by another core feature and the chosen key combination for line selection was ctrl+i... ctrl+shift+i opens chrome dev tools inside VSCode, so I've chosen ctrl+alt+i to this feature).\nHope it helps people that are migrating from Sublime to VSCode like me ;)\n[]'s\nRichard\n"}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOAzq8ig==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Render ligatures', 'body': "Enable ligature rendering via the text-rendering style, and account for a client-rect bug in Chromium that resulted in improper editing cursor placement.\n\nThe proper fix for this is to get the latest version of Chromium, where the client-rect bug has been fixed. I'm just submitting this pull request in case anyone wants the change in the meantime.\n\n(Hackily) Fixes #192 \n\n---\n\nThe editor [gets a bad rectangle from the DOM](https://github.com/Microsoft/vscode/blob/014193f5043999ab80579fbd763a3171e22638cf/src/vs/editor/browser/viewParts/lines/viewLine.ts#L353) when the editing cursor is at the end of the line. Specifically, requesting the coordinates of the right side of the the last character yields an incorrect value.\n\nWith just the CSS to enable ligatures, the cursor renders in an incorrect position whenever it's at the end of a line (regardless of whether ligatures are present):\n![broken demo](http://i.imgur.com/MHFc0HL.gif)\n\nThe bad-rectangle issue [has been fixed in Chromium](https://code.google.com/p/chromium/issues/detail?id=487028), so only the CSS change is necessary once VS Code uses newer Chromium.\n\nIn the meantime, the problem can be avoided by detecting requests for a point at the end of the line and using the bounding-box of the entire element to compute the correct value (i.e. instead of trying to get the right side of the last character inside the element, just get the right side of the entire element).\n\nWith the the ligature CSS and the bounding-box workaround, the caret renders in the correct position (and ligatures are rendered):\n![ligature demo](http://i.imgur.com/1m6p4L8.gif)\n"}, {'title': '[html] typos of angularjs attributes(directives)', 'body': 'fix typos in htmlTags.ts angular globalattributes as per Angular API reference, fixes Microsoft/vscode#1402\n'}, {'title': 'Support menu bar visibility toggle also on Linux (fixes #1563)', 'body': 'Commit c34d2e771bb3e372e912e081a8bd8879a92a8c91 adds this functionality but restricting it to Windows. I created a new issue #1563 for having the same toggle available also when running on Linux. This pull request should fix the issue on at least some Linux window managers.\n\nThe changes done in the earlier commit worked perfectly on Linux Mint 17.2 which is running a GTK+ 3 toolkit based Cinnamon window manager. I would expect the changes to work at least on other GTK based window managers.\n\n@bpasero noted that it didn\'t work on Ubuntu 15 which at least by default uses the Unity window manager. Unity has its own unique way of handling the menu bar. Ubuntu introduced an OS X style shared menu bar few versions back, and now Ubuntu 15 seems to refine the concept with a new "locally integrated menu". It would not be surprising if it caused incompatibility with more conventional approaches.\n'}, {'title': '[python] Disassociate .gn with python language', 'body': "While Python worked well with GN in v0.10.3, since then the progress made with\nthe Python language syntax highlighting doesn't play well with the extra quirks\non top of Python that GN introduces (braces, no colons to indicate blocks).\nMaking it less usable than no language mode.\n"}, {'title': 'Implement configurable cursor style', 'body': "With acknowledgements to @Protectator and his configurable blinking (#500), I've tried to do something similar to allow the cursor style (i.e. _line_ or _block_, at present) to be configured.\n\nRight now, the setting is configurable from editor.config, but with the right method somewhere(?) this could also be over-ridden by Vim mode plugins such as [VsCodeVim](https://github.com/VSCodeVim/Vim/) to switch between cursor styles for Normal and Insert modes (see https://github.com/VSCodeVim/Vim/issues/19 and https://github.com/Microsoft/vscode/issues/200).\n\nFeedback on what I've done so far would be much appreciated.\n"}, {'title': 'Improve auto save', 'body': '- [x] Show info for existing auto save users how to enable this\n- [x] Remove old auto save behaviour from code\n- [x] Log this setting to telemetry\n- [x] Add delay to autosave: fixes https://github.com/Microsoft/vscode/issues/1055\n- [x] Save on focus lost: \xa0fixes https://github.com/Microsoft/vscode/issues/353\n- [x] Allow to configure auto save per workspace: fixes https://github.com/Microsoft/vscode/issues/1211\n'}, {'title': 'Avoid computing end condition on each iteration', 'body': ''}, {'title': 'Fix debugging debugAdapters when offline', 'body': 'I sent a PR to fix offline debugging in vscode-node-debug, and this is fixing basically the same problem that shows up when you try to debug a debugadapter by connecting via a local port.\n'}, {'title': 'branch: toggleWordWrap_1a', 'body': 'desc:  Add word wrap toggle function.\nhotkey: Alt-Z\n'}, {'title': 'Toggle word wrap 1b', 'body': 'correct indentation errors\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOA0ELqg==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Changing some for loops from "for (let i= ... i++)" to "for (let el o…', 'body': 'Changing some for loops from "for (let i= 0; i < list.length; i++)" to "for (let element of list)".\n'}, {'title': 'Isidorn/conditional breakpoints', 'body': 'Adds conditional breakpoints support to vscode\n\nfixes #1582, #1671 \n'}, {'title': '[bat] Fix batch syntax', 'body': 'Fixes some issues with batch syntax, addressing #487 \n- `rem` comments are properly detected\n- variables are properly parsed, including\n  - `%regular_variables%`\n  - `!delay_expanded_variables!`\n  - Script parameters (`%1`, `%~dp0`, etc.)\n  - Loop induction variables (`%%f`, `%%~nxf`, etc.)\n- Incomplete strings now terminate at end of line, fixing cases like the following:\n\n``` batch\n   echo incomplete " string\n   echo broken line, treated as string\n```\n'}, {'title': 'Search: Investigate into native commands for recursive file listing', 'body': 'Mac: `find -L <folder> -type f`\nLinux: `find <folder> -type f -follow`\nWindows: `dir <folder> /s /b /a-d`\n\nRelated: #55\n'}, {'title': 'replace case with proper type declaration', 'body': "Just a code review. Thought I'd share :rose:\n"}, {'title': 'Prevent to show install message for installed extensions (fixes #1411)', 'body': ''}, {'title': 'Added development instructions to tests README', 'body': ''}, {'title': 'Update to Electron 0.35.5', 'body': '- [x] adopt new API modules\n- [x] disable ASAR with `process.noAsar`\n- [x] fixes #1485 (Windows 7 delete fails)  \n'}, {'title': 'register text document provider', 'body': 'PR to implement  #272\n'}, {'title': 'Add animation-fill-mode property', 'body': 'There is missing animation-fill-mode in VS Code 0.10.6.\nSo, animation-fill-mode is not applied colorizer.\n\n![animation-fill-mode](https://cloud.githubusercontent.com/assets/9623009/12198673/2dd788d4-b60a-11e5-8a3c-e909ad14e8a4.gif)\n\nI add animation-fill-mode property.\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOA05CEQ==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Replaced all old style imports to ES6', 'body': "I changed all AMD and CommonJS imports to ES6 style. This paves switching from amd style modules to ES6 in the future.\n\nAll files in `src/vs/**/*.ts` and `extensions/**/*.ts` are searched and replaced. JavaScript output is ~~almost~~ identical.\n\n``` ts\nimport x = require('module') => import x from 'module'\n```\n"}, {'title': 'add viewlets to View menu', 'body': ''}, {'title': 'quick pick enhancements', 'body': 'this is to implement #1795 \n'}, {'title': 'Allow details in quick pick', 'body': '@bpasero Please review,  I have re-purposed the unused (badly used) `meta` property and made is render below the label and description. Unsure whether we should give all items the same height if one as detail or not...\n\n<img width="760" alt="screen shot 2016-01-13 at 16 41 21" src="https://cloud.githubusercontent.com/assets/1794099/12298875/8fc82892-ba14-11e5-9b93-f4ae9f25417b.png">\n'}, {'title': 'added theme-wildlife', 'body': 'A vibrant vscode tm-Theme that supports over 75 languages.\n'}, {'title': 'support to validate user input', 'body': 'this is for #1979 \n'}, {'title': 'Integrate tslint', 'body': 'This PR integrates tslint. \n\nIt adds:\n- a `tslint.json` file. The rules defined in the tslint.json file are currently minimal. The only rule enabled is the `no-unused-variable`. \n- `gulp tslint` runs tslint across the vscode base.\n- a task to run tslint from inside Code.\n- the microsoft tslint rule [extensions](https://github.com/Microsoft/tslint-microsoft-contrib). The rules are currently not used, but they will enable us to use rules like `promise-must-complete`.\n\nTo get tslint checking as you type you need to install the [vscode-tslint](https://marketplace.visualstudio.com/items/eg2.tslint).\n'}, {'title': 'Implement a horizontal panel for the workbench', 'body': 'Adding horizontal panel to the workbench (see #1875).\n'}, {'title': 'Sort extensions by install count rather than alphabetically. ', 'body': 'It is easy to game the current system for extensions. This PR should solve that by sorting extensions based on install count. \n\nThere was some concern about adding the "install count" filter to the API. Here is the profiling using a python script and [cProfile](https://docs.python.org/2/library/profile.html#module-cProfile). \n\n| Test Run | No Install Count | Retrieving Install Count |\n| --- | --- | --- |\n| 1 | 2.212 | 1.792 |\n| 2 | 1.792 | 2.193 |\n| 3 | 1.805 | 1.798 |\n| 4 | 1.755 | 1.856 |\n| 5 | 1.708 | 1.874 |\n| Mean | 1.854 | 1.903 |\n\nAs you can see there is a slight slow down. Seems trivial to me though. \n\nFeedback on the UI is appreciated. \n\nYou\'ll notice I made a trade off in the UI to remove "days ago" in favor of install count. I rearranged install count with version. I played around with adding "installs" next to the number, but decided against it only so as not to clutter the UI. \n\n![screen shot 2016-01-15 at 3 07 30 pm](https://cloud.githubusercontent.com/assets/2449568/12368171/d5a816da-bb9d-11e5-9d91-b1fb6e3a9798.png)\n\nHere is the old UI for reference. \n\n![screen shot 2016-01-15 at 3 44 15 pm](https://cloud.githubusercontent.com/assets/2449568/12368297/e8be0c56-bb9e-11e5-8167-e51351c685b5.png)\n'}, {'title': 'Fix connecting to debugAdapter by port when offline', 'body': 'Just remembered that I need to try #1641 again :)\n\nI sent a PR to fix offline debugging in vscode-node-debug, and this is fixing basically the same problem that shows up when you try to debug a debugadapter by connecting via a local port.\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOA1qWeQ==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Treat surrogate pairs as one character', 'body': 'I felt bad touching the other test cases but it was the most minimal change to the suite I could come up with. This doesn\'t address some other, related issues like "8 selected" in the status bar when there are actually only 7 "real" characters in the selection.\n\nFixes https://github.com/Microsoft/vscode/issues/2069\n'}, {'title': 'Support and indicate keyboard focus on elements', 'body': ''}, {'title': 'html preview part and command', 'body': 'implements #1308\n'}, {'title': 'no snippets in comments', 'body': ''}, {'title': 'no snippets in comments', 'body': '@aeschli A quick (and dirty?) solution for overly aggressive snippet completions when typing comment text. Agreed?\n'}, {'title': "'scripts\\npm install' bugs in windows7", 'body': 'I use `scripts\\npm install` to install vscode. But some native node modules (e.g `weak` `native-keymap`) can`t startup.\n\nI found that the problem was setting  npm_config_target failed.\n\n`ConvertFrom-Json` is introduced in Windows PowerShell 3.0. but my powershell`s version is 2.0.0.\n\nhttps://technet.microsoft.com/en-us/library/hh849898.aspx\n\nso I try to use `findstr` replace `poweshell` to setting  npm_config_target.\n'}, {'title': 'Add keybinding options for Replace and Replace All (#2004)', 'body': 'Add editor commands for the Replace (ReplaceOne) and ReplaceAll\nactions. Provide default keybindings which only fire when the\nReplace widget is visible.\n'}, {'title': 'Adding a global Env to the extension API', 'body': 'This will add a global Env variable that can contain information about VSCode. \n\nThe Evn variable for now contains: \n- Version\n- Machine Id. \n- Session Id. \n- Locale (to be implemented). \n'}, {'title': 'Fixing indentation in package.json', 'body': ''}, {'title': 'Output in horizontal panel', 'body': ''}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOA2F11A==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'More tree focus changes', 'body': '@joaomoreno fyi\n'}, {'title': 'improved "Utilities.containsQueryString"', 'body': 'improved "Utilities.containsQueryString" to only match when there is a real querystring "xyz.com?var=value"\n'}, {'title': 'Salsa status', 'body': 'Show whether salsa is used in the status bar and version check the typescript server.\n'}, {'title': 'Remove static welcome page and move welcome experience to the website', 'body': 'The welcome page is static and does not provide a lot of value. This change will stop showing the welcome page on first run experience, it will instead open a tailored welcome page in code.visualstudio.com. \n\nTaking the welcome page out of VSCode will allow us to change it more rapidly and customized it for user needs. \n\nThe change include: \n- Remove ShowWelcomeAction from the menu and stop rendering the welcome page on first run. \n- It will reuse welcomePage env variable to supply the URL that VSCode will open on first start. \n'}, {'title': 'Always attempt to correct indent on closing tag', 'body': 'Fixes #2116 \n\n---\n\n/cc @aeschli, not sure what the original intent of making this false was but it would seem to be that correcting the indent is always desirable for closing tags?\n'}, {'title': 'Send smile to twitter', 'body': "Changed the words in the feedback form to be straightforward about a tweet going out (per @egamma's feedback). \n\n![tweetfeedback](https://cloud.githubusercontent.com/assets/2449568/12524507/4829d35a-c112-11e5-9499-0880d3152961.png)\n![image](https://cloud.githubusercontent.com/assets/2449568/12524551/8976ec58-c112-11e5-85ad-b8c3a088431f.png)\n"}, {'title': 'next level MarkedString', 'body': 'this is for #1856 and more\n'}, {'title': 'Aria roles for tree', 'body': ''}, {'title': 'Add json language server', 'body': ''}, {'title': 'Support for middle click to paste selection on Linux', 'body': "I hope to make this PR eventually fix #110. Currently it inserts the selection from the clipboard on Linux at the current cursor position. The following needs to be done to the PR:\n- [ ] Do it the proper way (should this live in `codeEditorWidget.ts`?)\n- [ ] Update the cursor to be under the mouse (emit some event that's picked up by `MouseHandler`?)\n- [ ] Clear the selection after pasting\n- [ ] Add tests if possible\n\nAny advice on the first two points by people familiar with the code would be greatly appreciated.\n"}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOA2zaJA==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'fix #2491', 'body': '…ocus, tho must be set manually as class\n'}, {'title': 'Send smile to twitter', 'body': '![screen shot 2016-01-28 at 1 25 13 pm](https://cloud.githubusercontent.com/assets/2449568/12659358/3e7a0432-c5c3-11e5-8df4-8fddf95b3e6b.png)\n\nChanged the button to be more Twitter like. \n'}, {'title': 'Understand update.channel set to none', 'body': 'This fixes #2520 \n\nThere are some users which would like to prevent automatic updates. These users either set the update channel to `none` in the `storage.json` or the `settings.json`.\n\nI want to drop `storage.json` and will explain it in the release notes/blog post. But we still need to respect disablement via the settings.\n\nThis PR brings back the setting and disables updates if the value is set to `none`.\n\n@bpasero please review the code flow in `update-manager.ts`. Thanks.\n'}, {'title': 'Update to Electron 0.37.x', 'body': 'Fixes the following issues:\n- Linux: Button order in dialogs: https://github.com/Microsoft/vscode/issues/1297\n- Mac: Storage flush on update: https://github.com/Microsoft/vscode/issues/172\n- Show the application window as soon as possible: https://github.com/Microsoft/vscode/issues/163\n\nMight have impact on following issues on blurriness:\n- https://github.com/Microsoft/vscode/issues/1896\n- https://github.com/Microsoft/vscode/issues/1334\n- https://github.com/Microsoft/vscode/issues/254\n- https://github.com/Microsoft/vscode/issues/959\n\n**Updates:**\n- Chrome from 45 to 49\n- node.js from 4.1.1 to 5.10.0\n- libuv from 1.7.4 to 1.8.0\n'}, {'title': 'fix [sql] syntax highlighting error #1634', 'body': 'fixed [sql] syntax highlighting error #1634\n'}, {'title': 'Fix md image link with no alt text highlighting', 'body': 'Fixes #2565 \n\n![md_links](https://cloud.githubusercontent.com/assets/2193314/12696775/d570f2be-c727-11e5-9ab5-297d504e269e.png)\n'}, {'title': 'Associate .cson with CoffeeScript', 'body': 'Fixes #2568\n'}, {'title': 'fix replacing end of line with newline', 'body': 'Fixes https://github.com/Microsoft/vscode/issues/2586\n'}, {'title': 'Allow Code to be launched straight from Git Bash on Windows', 'body': "Fixes #1704. Follows the same logic in [the batch file](https://github.com/Microsoft/vscode/blob/master/resources/win32/bin/code.cmd) to create a wrapper script for the executable and run it.\n\nI've tested this locally on my machine, and it seems to be working well.\n"}, {'title': 'add emmet support for .erb and .php files', 'body': 'and treat them like html \n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOA3KlvQ==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Add message that indicates you can press ESC to cancel a search, fixes #2494', 'body': 'Fixes #2494 \n'}, {'title': 'Fixes to C++ and C syntax', 'body': 'alignof and alignas are now C++ keywords.\nfriend and override as well as the method modifier const are now C++ only.\n.H headers are now associated with C++.\n'}, {'title': 'Add -h/-v command line args and linux/mac launch scripts', 'body': 'Fixes #378\n'}, {'title': 'Atom.io like multiline support for snippets', 'body': 'Updates the JSON parsing of snippets to support the pasting of multiple\nlines without the restriction that JSON places on strings that requires\nquotations and commas for each line.\n\nEnclose snippets between on separate line from the body attribute.\n\n[/\\* \\* *\n\n```\n       * * */]\n```\n\n{\n\n/*\n     // Place your snippets for TypeScript here. Each snippet is defined\nunder a snippet name and has a prefix, body and\n     // description. The prefix is what is used to trigger the snippet and\nthe body will be expanded and inserted. Possible variables are:\n     // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for\nvariables. Variables with the same id are connected.\n     // Example:\n\n_/\n     "Print to console": {\n        "prefix": "shelz",\n        "body":\n            [/_ \\* *\nexport class AppComponent {\n    constructor() {\n\n```\n}\n```\n\n}\n           \\* \\* */]\n        ,"description": "Log output to console"\n    }\n'}, {'title': 'Use the List widget in the Suggest widget', 'body': 'Related to #2490, #1923.\n\nPing @Wosi\n'}, {'title': 'extension tips', 'body': 'PR to show extension tips based on usage, like `*.go` -> _install go extension_ etc\n'}, {'title': 'Focus tracking with 2 markdown previews is broken (fixes #2489)', 'body': ''}, {'title': "Regexp character class closing bracket should't be part of his beginning match", 'body': "When you insert empty character class brackets pair into regex the syntax highlighter doesn't recognize the end of the character class and erroneously highlight rest of the code.\n"}, {'title': "Fix #2687: Stop capturing 'REM' as a keyword.command in Batch", 'body': 'PR #1678 fixed most batch comment syntax issues, but still kept capturing `REM` as a comment, which causes it to be colored differently from the rest of the line. This PR removes the special handling around the keyword, such that the whole line is treated as a comment.\n'}, {'title': 'debugProtocol update: Add types for function breakpoints', 'body': 'I did not push this change because it introduces one small incompatibility that needs adoption.\nIn the Breakpoint type (that is returned form the setBreakpointRequests), the `line` attribute is now optional (like `column`) because function breakpoints do not necessarily provide line information on verification.\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOA3ysew==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Fixed a bug where action-items in git-viewlet changes-view was vertic…', 'body': '…ally misaligned. Issue #2642.\n'}, {'title': 'Adds sort lines (ascending and descending) command', 'body': "- Took a crack at issue #536, given it had the `help wanted` label\n- Adds keyboard shortcuts to sort lines (chose arbitrary shortcuts, probably want to change those)\n- Didn't create formal test cases (won't have the time for a while), but did verify changes using strings from [random.org](https://www.random.org/strings/?num=10&len=10&digits=on&upperalpha=on&loweralpha=on&unique=on&format=html&rnd=new)\n"}, {'title': 'Fixes Markdown header highlighting rule', 'body': '- In response to issue #1238.\n- Fixed regular expression for Markdown headers, testing across a variety of my repositories that are Markdown heavy without issues, but additional testing is probably warranted.\n'}, {'title': 'Add support for jsonSchema integer type in Intellisense', 'body': "http://json-schema.org/latest/json-schema-core.html#anchor8\nJSON schema defines primitive type 'integer'. It should be generally handled the same way as number in terms of autocompletion.\n"}, {'title': 'Match longer JavaScript operators first to support ligatures.', 'body': "With the new support in version 0.10.8 for font ligatures, I'd noticed that some operators weren't being combined properly in JavaScript. This is because the language file had some of the shorter operators being matched first, so `||` would match as two `|` operators and `!==` would match as `!=` followed by `=`. Switching the order in the language file has fixed the ligatures in addition to having more correct grouping.\n\nI've made the same fix to the JavaScript, JavaScriptReact, TypeScript, and TypeScriptReact language files.\n"}, {'title': 'Fixed typo in json parser', 'body': ''}, {'title': 'Hide frontmatter in Markdown Preview', 'body': 'Initial attempt at addressing #2640 \n'}, {'title': 'fix TextEditorOptions declaration - fixes #2797', 'body': 'It is possible to provide the value `auto` to either one of the properties. So the declaration is not entirely correct.\n\nThis fixes #2797 \n\n// @alexandrudima \n'}, {'title': 'Add gulp tasks to build deb packages', 'body': 'Build, install and run:\n\n``` bash\ngulp vscode-linux-packages\nsudo dpkg -i out-linux/vscode-amd64.deb\ncode .\n```\n\nInstalling the package does the following:\n- Puts VSCode dir at `/usr/share/code`\n- Puts code.sh launcher in `/usr/bin`\n- Defines a `.desktop` file to properly integrate with the launcher\n\nFixes #2679\n\n---\n\n@joaomoreno let me know if you spot any issues\n'}, {'title': 'Add Vagrantfile as a ruby language file extension', 'body': 'As those are just some regular ruby files.\n\nSee https://www.vagrantup.com/ for more information about the tool.\n\n![image](https://cloud.githubusercontent.com/assets/2091902/13006519/b7abe592-d189-11e5-86bb-60659e0a1ed5.png)\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOA4bK-w==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Add indent based code folding', 'body': ''}, {'title': 'Make OSS product long name actually long', 'body': "'Code - OSS' didn't look great in the launcher.\n\nFixes #2982\n\n---\n\n@joaomoreno is this is fine for Windows and Mac? Matches format of official build.\n"}, {'title': 'refactor AIAdatper out of ai telemetry appender', 'body': 'This change refactors the application insight wrapper logic outside of the `nodeAppInsightsTelemetryAppender`.\n\nApp Insights requires special logic to make sure that the client is setup with the correct properties, as well as making sure we disable all non-required collections. \n\nWith this change, `AIAdapter` is now available in base/node as dependency to be used anywhere in the codebase. Taking this to base is intensionally not to have any tie between Application Insights and the telemetry service as they are not coupled from architecture perspective.  \n'}, {'title': 'Adding optout option for telemetry', 'body': 'This change will add a user setting that will allow to optout of reporting telemetry. The product will allow a set of predefined events to pass the user optin settings. This way we can calculate the optin rates. \n\nThe change include: \n- Refactor `ITelemetryConfiguration` from `mainTelemetryService` to `telemetry.ts`\n- Add a configuration option from the `ElectronTelemetryService`. This service will be responsible for caching the events that are reported until the user optin settings are loaded. After that, the service will flush the events. This is to prevent race conditions as some events are reported on load (auto save, workspace stats, workspace load). \n- Add a mechanism to allow for a predefined events to pass user optout settings in `mainTelemetryService`. \n- Tests \n'}, {'title': 'Fixed small bug related to issue #2662.', 'body': 'We were showing "1 characters". This fix will remove the "s" when count is singluar.\n'}, {'title': 'Extension tips', 'body': 'Added a couple more extensions to the tips json. \n'}, {'title': 'Add Error List', 'body': ''}, {'title': 'debug: telemetry key contributed by debug adapters', 'body': 'Adds a telemetryKey to the debug world such that the telemetry events from adapters are seperated into buckets.\n\nfixes #2931\n'}, {'title': 'some mistake in writing in folding.ts', 'body': 'Maybe a mistake\n'}, {'title': "Merge remote-tracking branch 'refs/remotes/Microsoft/master'", 'body': ''}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOA44GQA==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Forward arguments in the shell script correctly: use "$@" instead of $*', 'body': 'Also made a few other changes:\n- added an `exec` to improve performance (which replaces the current process instead of spawning a subshell)\n- changed the shebang to `#!/usr/bin/env`, as this is best practice.\n'}, {'title': 'Fix code folding keyboard mix up', 'body': 'The current implementation for keyboard bindings to code folding works as advertised (in the default keyboard bindings file) for single fold/unfold, but foldAll/unfoldAll is flipped.\nThis pull request fixes that.\n\nNote: it is possible that the keyboard bindings are back to front i.e open/close square bracket. I have not changed them and do not know which you intended to do what. Feedback in the comments on this would be appreciated.\n'}, {'title': 'vscode.d.ts: workspace.rootPath is read-only', 'body': 'Small change: added the `@readonly` flag to workspace.rootPath\n'}, {'title': 'Added tslint to the hygiene pre-commit check', 'body': ''}, {'title': 'add support for restarting debug session', 'body': "If a TerminatedEvent has an attribute 'restart' and its value is true, the debug session is restarted. This can be used to automatically reattach to a node process that is relaunched by nodemon (see #2103)\n"}, {'title': "Change accelerator key for menu item: User Snippets from 'U' to 'S'", 'body': 'I often like to go into the user settings, which should be just a `alt+f p u` away. However both the "User Settings" and "User Snippets" menu items have the same accelerator key: U, which means having to press Enter as well.\n![menu](https://cloud.githubusercontent.com/assets/6125444/13154994/e52c10cc-d67b-11e5-8959-e9770b1d6b5e.png)\n\nSo this commit changes the key or "User Snippets" from \'U\' to \'S\'. There\'s other instances of accelerator key duplication in the menus, but this one seemed easy to tackle.\n'}, {'title': 'Add "launch"-type config to launch.json', 'body': "Now I can just hit F5 to build and debug vscode. Also removed 'outDir' which isn't used anymore.\n"}, {'title': 'Fix opening code via command line using relative paths', 'body': "Opening code using `code ..`, `code ../..`  was opening the wrong directory\nsince trailing '.' characters were being trimmed by the launch code.\n\nFixes #3127 \n\n---\n\n@bpasero I'm assuming that the trimming was added for Windows, just wanted to make sure that was the intent. Or can we remove it?\n"}, {'title': 'New extension tips for php, ts, py, cc, rs', 'body': ''}, {'title': 'Enabling high contrast dark theme on all platforms + hc-dark improvements', 'body': "Addresses #2711\n- Enables the hc-dark theme on all platforms.\n- Improves color contrast to AAA standard on many elements that weren't previously meeting it.\n- Resolves visual bugs, such as synthetic-focus misplacement and action bar duplicate icons\n- Differentiates the selection of text from current line and find/word matching\n- Works well in Mac OSX even when OS-level accessibility features are enabled, such as increasing contrast.\n### NOTE:\n\nA CSS rule used (`mix-blend-mode: difference;`) currently works in all browsers but Opera, IE and Edge, so it will not be ideal for the online Monaco editor without suitable shims.  Let me know if we need to address this; we can do that now or in the future.\n"}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOA5PeSQ==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Updated Swift Autocompletion Syntax', 'body': 'Performed updates to the Swift Snippets JSON so that they match the latest language syntax\n\nUpdated :\n- print()\n- repeat {} while\n\nAdded :\n- Guard statement\n- Optional Binding Statement\n'}, {'title': 'Update Rust Syntax to Fix Ligatures', 'body': "Currently, common ASCII symbols in Rust code (like `->` in function declarations) are in different spans, which means they can't be displayed as ligatures in fonts that support them. As suggested in #2870, this commit adds a few more 'operators' to the Rust syntax, fixing the ligatures.\n\nThis is the first time I edited a syntax definition for VisualStudio Code. If someone has a suggestion on how to improve this, I would very much like to hear it.\n"}, {'title': 'File and folder icon theme feature', 'body': "Relates to #211 \n\nAdds ability to create color and icon themes using css.\nAdds ability to create an icon theme (css only).\nAdds ability to switch icon theme's independently of color themes\nDoesn't break current textmate themes\n\n![new-icon-theme-option](https://cloud.githubusercontent.com/assets/1727302/13712506/f0c97392-e7bb-11e5-90c4-7bb28d2b3f5b.png)\n\nExamples of icon themes mixed with different color themes:  (icons probably not to be included in the final merge)\n![dark-plusiwth-icons](https://cloud.githubusercontent.com/assets/1727302/13712522/00e9ed88-e7bc-11e5-9906-2c0954ccd6af.png)\n![untitled](https://cloud.githubusercontent.com/assets/1727302/13712707/1119830c-e7bd-11e5-99a1-ac6fc5986c4e.png)\n![monokai-icons-with-quiet-light](https://cloud.githubusercontent.com/assets/1727302/13712525/05629de2-e7bc-11e5-81b9-3c8bd3ecedd7.png)\n"}, {'title': 'Merge pull request #1 from Microsoft/master', 'body': 'updated fork\n'}, {'title': 'Merge pull request #1 from Microsoft/master', 'body': 'updated fork\n'}, {'title': 'Adds the new icons to code folding', 'body': "@aeschli, this should be pretty simple, as it's just new assets and a little CSS.  Could we pull this in before testing this?\n\nFYI - @weinand and @Tyriar\n"}, {'title': 'vscode', 'body': '[vscode-master.zip](https://github.com/Microsoft/vscode/files/143453/vscode-master.zip)\n@msftclas \n'}, {'title': 'Adds custom terminal launch settings', 'body': 'This allows windows and linux users to specify which terminal they would like to launch when using the browser context menu -> "Open in Command Prompt". \nFalls back to the default terminal if no settings specified.\n\nNew setting examples: \n\n``` js\n// Place your settings in this file to overwrite default and user settings.\n"terminal.external": {\n    "windowsExec": "cmd", // default\n    "linuxExec": "x-terminal-emulator" // default for debian, otherwise "gnome-terminal" for gnome desktops\n}\n```\n\nEnsures any spawn error is sent to the errors.onUnexpectedError event.\n\nrelates to #597 \n'}, {'title': 'Register the apt repository as a source for official .deb builds', 'body': 'Part of #2973\n\n---\n\nPutting this out as a PR due to code freeze, this will be going in for March. It depends on a deployment of https://github.com/Microsoft/vscode-update-server (and subsequent testing).\n\n/cc @joaomoreno \n'}, {'title': 'Add text-decoration: none to intellisense', 'body': 'Simplify its description.\n\nFixes #3524\n\n---\n\nWaiting for Feb release to be finalized before pushing\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOA6JwvA==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': 'Highlight CSS property values in Dark+', 'body': 'This makes highlighting more consistent with Light+ and adds some much needed\ncolor to CSS files.\n\nFixes #1656\n\n---\n\nWaiting for Feb release to be finalized before pushing.\n\nLight+ (unchanged):\n\n![light_plus](https://cloud.githubusercontent.com/assets/2193314/13377558/2a311cb0-dd95-11e5-8c44-af21a23b3b43.png)\n\nDark+ (old):\n\n![dark_plus_old](https://cloud.githubusercontent.com/assets/2193314/13377559/35edd62e-dd95-11e5-9e11-76f2dae6b6bf.png)\n\nDark+ (new):\n\n![dark_plus_new](https://cloud.githubusercontent.com/assets/2193314/13377560/38d55664-dd95-11e5-95ab-4d6177e7f9bf.png)\n'}, {'title': 'Associate .xhtml with HTML language mode', 'body': 'Fixes #3521 \n\n---\n\nWaiting for Feb release to be finalized before pushing\n'}, {'title': 'Fix css transition of folding icons', 'body': 'Fixes #2984 by using this [CSS trick](https://css-tricks.com/snippets/css/transparent-background-images/) mentioned in #3383 \n\nIncludes reverts of b0ca83f and 20d655f\n'}, {'title': 'Simplify test script definition in package.json', 'body': "As npm puts files from `./node_modules/.bin` in `$PATH` when running npm scripts, running bin commands from npm dependencies could be run directly, without a bin script deep inside `node_modules`.\n\nP.S. great editor you've made so far!\n"}, {'title': 'Use local version of gulp in build steps', 'body': 'Previously developers had to install gulp globally on their machine to build the project. These changes changes that by using the already locally installed version of gulp, removing the environment requirements aswell as ensuring everyone are using the same version of gulp.\n\nIt fixes the VS Code build tasks, aswell as creating a npm script to trigger the watch task:\n\n``` bash\n$ npm run watch\n```\n'}, {'title': 'Added telemetry for debugging scenarios', 'body': 'Added watchExpressionCount to debugSessionStart and debugSessionStop\nAdded an event for when a user is entering commands in Debug Console\nAdded events for users clicking on items in CallStack and Variables windows during debugging\n'}, {'title': 'Use local version of gulp in ./scripts/code.sh', 'body': 'As with #3649 it removes the need for global installation of gulp. This was already the case for the windows, in ./scripts/code.bat.\n\nThis made me able to build and run a dev version of VS Code without gulp globally :dancers: \n'}, {'title': 'Ionic HTML Intellisense', 'body': 'Adding [Ionic framework](http://ionicframework.com/docs/api/) directives to the HTML Intellisense\n'}, {'title': 'Allow file name to language associations via settings (fixes #3612, #2883)', 'body': ''}, {'title': 'vscode gitignore updated. Added typings directory.', 'body': 'typings directory is created when we want to use nodejs IntelliSense in VSCode.\nhttps://code.visualstudio.com/Docs/runtimes/nodejs#_great-code-editing-experiences\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOA62H1g==', 'hasNextPage': True}}}}}{'data': {'repository': {'pullRequests': {'nodes': [{'title': "[go syntax] Don't treat multiline `var` specially", 'body': "The pattern for multiline var appears to be unnecessary - variable declarations inside multiline var declarations colorize the same without this.  \n\nIt's presence cause the issue mentioned in https://github.com/Microsoft/vscode-go/issues/223 where comments inside the multiline var declaration are not colorized.\n\nFixes https://github.com/Microsoft/vscode-go/issues/223.\n"}, {'title': 'Adding descriptions of Ionic HTML tags', 'body': ''}, {'title': 'Remove highlighting of "variable declaration" in rust highlighter', 'body': 'Removes highlighting of "variable declaration". The pattern falsely assumes that ":" only occurs in type declarations. This is not true as it is also used when initializing a struct:\n\n``` rust\nStruct {\n    member: 1 << 2\n}\n```\n\nAs the pattern also includes `type_params`, any `<` in the member initialization code breaks the highlighting of the rest of the file. I simply removed the patterns as it is quite tricky to distinguish these cases.\n'}, {'title': 'add the `extensions` folder to gitignore to prevent accidental commits', 'body': 'The npm postinstall hook installs extensions into an `extensions` folder, which pollutes the `git status` output, and someone may commit some of those files by mistake. This addition to the `.gitignore` file guards against that.\n'}, {'title': '[WIP] add a visual divider between gutter (glyph area) and code area', 'body': "This is a first-try to fix #3803 \n\nNeed some comments on:\n1. To show the `right-border`, I have to do **either** of these things:\n- Set the gutter's `z-index` to 1 (anything greater than code-areas)\n- Set the gutter's `box-sizing` to `border-box`\n\nI feel both are correct approaches though I'm a little surprised that vscode is not using the `*, *:before, *:after { box-sizing: border-box }` style at the root.\n1. I feel a little margin is needed to the right of the gutter to add more aesthetics, but seeing that the positions are inlined, I think I'd need some guidance on how to approach this, before diving into the `ts` source files.\n"}, {'title': 'use os-specific EOL while creating the copyrightHeader for hygiene checks', 'body': "Right now, the hygiene checks fail on windows machines because the `copyrightHeader` standard is being by joining an array of strings with a `\\n`, which doesn't work on Windows with it's CRLF line-endings. This PR addresses that by using OS-specific line endings while building the copyrightHeader standard string.\n"}, {'title': 'use os-specific EOL while creating the copyrightHeader for hygiene checks', 'body': "Right now, the hygiene checks fail on windows machines because the `copyrightHeader` standard is being by joining an array of strings with a `\\n`, which doesn't work on Windows with it's CRLF line-endings. This PR addresses that by using OS-specific line endings while building the copyrightHeader standard string.\n"}, {'title': 'fix activate extension telemetry event to include', 'body': "I noticed that eager extensions activation events were not being caught previously as they don't go through `_actualActivateExtension`. I am moving the reporting to `_doActualActivateExtension` where I think we catch all the activation scenarios for all events. \n"}, {'title': 'Extension status bar improvements & polish', 'body': 'related to #2835, #3540\n'}, {'title': 'Fixes #3650: Support stop-all-threads mode debugging for multi-thread…', 'body': 'As discussed in #3650, this adds support for stop-all-threads mode by adding a flag to the StoppedEvent that the debug adapter sends. Here\'s the fix in action:\n\n<img src="https://cloud.githubusercontent.com/assets/637952/13693056/dd2e406c-e6fb-11e5-98b3-eeb0390d3794.gif" data-canonical-src="https://cloud.githubusercontent.com/assets/637952/13693056/dd2e406c-e6fb-11e5-98b3-eeb0390d3794.gif" width="335" height="315" />\n\nI tested this change with a basic multi-threaded program, and verified:\n- [x] Expanding threads that are not the one that sent the stopped event triggers a query for their callstack\n- [x] Already expanded threads get updated when a new stopped event is sent\n- [x] Node debugging works (including debugging VSCode extensions)\n- [x] Mono debugging works (handling multiple threads work as before)\n- [x] Go debugging works (handling multiple threads work as before)\n- [x] C# debugging works (with the new omnisharp-based extension)\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOA7mb8g==', 'hasNextPage': True}}}}}