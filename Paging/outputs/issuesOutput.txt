{'data': {'repository': {'issues': {'nodes': [{'title': 'Open Source VS Code', 'body': ''}, {'title': 'gulp-symdest does not preserve links on electron', 'body': 'Looks like gulp-symdest no longer keeps symlinks in the Electron build when downloaded for Mac.\n'}, {'title': 'Omnisharp not included in Linux build', 'body': 'Our linux build machine does not include the csharp-o/**bin** folder.\n1. Running `scripts/npm.sh install` -> csharp-o/**bin** folder nicely gets created on my linux machine.\n2. Running `gulp vscode-linux-x64` also nicely creates the csharp-o/**bin** folder on my linux machine.\n\nSomething is strange on our build machine\n'}, {'title': 'C# bracket insertion, indentation not working', 'body': 'Type if (\n\nexpected => closing )\nactual => nothing\n'}, {'title': 'welcome.md packaged wrongly', 'body': 'VSCode > Help > Show Welcome > does not work\n\nIf I look at the contents of my VSCode package I see a top level resource folder containing a welcome.md. This looks badly placed\n'}, {'title': 'Windows only - OmniSharp does not provide IntelliSense for strong named assemblies ', 'body': 'upgrade to rc1 dnx/runtime\n\n``` bash\ngit clone https://github.com/natemcmaster/test-vscode-strong-name\ncd test-vscode-strong-name\ndnu restore\ncode .\n```\n\npick the Test project.json\n\nresult => "Internal Class InternalClass is not accessible..." error.\n\nWorks on OSX\n'}, {'title': "Can't run from dev [osx]", 'body': '```\n./scripts/code.sh\n```\n\n![image](https://cloud.githubusercontent.com/assets/22350/11162335/ce445c68-8a9d-11e5-9ace-8d896d1a9c0b.png)\n'}, {'title': 'Flash between opening of workspaces, reload', 'body': "start code\nset a dark theme _other than the default dark theme_ if you don't already run with a dark theme\nfile | open folder -> pick any folder\nfile | open folder -> pick some other folder\n\nresult: you'll see a delay/flash between opening of workspaces.\n"}, {'title': 'Extension development: null and undefined values not printed to debug repl', 'body': 'When using console.log() with null or undefined values from an extension, no output shows up in the debug repl making it very hard to understand what is going on at that time.\n'}, {'title': "Cannot find module 'sinon' when running test/run.sh from terminal", 'body': "open terminal\ncd vscode/tests\n./run.sh\n\nresult: \n\nDetail:  { [Error: Cannot find module 'sinon'] code: 'MODULE_NOT_FOUND' }\n"}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBvlxMQ==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': '[clojure] Block comment is not colored any different', 'body': 'Have a clojure file and toggle a block comment somewhere. The code after the block comment is not colored as a comment at all.\n'}, {'title': 'Bad coloring in Kimbie dark theme for some languages', 'body': 'When using Kimbie Dark with C#, the comments and sourcecode have the same color:\n\n![image](https://cloud.githubusercontent.com/assets/900690/11176196/e9a8fb78-8c3a-11e5-9e9e-38d751324cee.png)\n'}, {'title': 'C#: Line/Block comment does not work', 'body': 'I cannot set a line or block comment in C# files anymore.\n'}, {'title': 'CSS: toggle line comment is not preserving', 'body': 'Have a CSS block like this:\n\n``` css\n.monaco-workbench > .part > .status {\n    display: none; /* Parts have to opt in to show title area */\n}\n```\n\nPut the cursor to the body of the declaration and toggle line comment twice, you end up with this:\n\n``` css\n.monaco-workbench > .part > .status {\n    /*display: none;  Parts have to opt in to show title area */\n}\n```\n'}, {'title': '[f#] Block comment not colored as comment', 'body': "Using the block comment in F# adds the following around 'samplesLabel':\n\n``` F#\nlet mutable (*samplesLabel*) : System.Windows.Forms.Label = null\n```\n\nThis is however not colored as a comment in VS Code.\n"}, {'title': 'HTML: Not auto-closing quotes when typing attributes', 'body': 'I would assume that typing the opening quote for an attribute puts the closing quote automatically, but this is currently not happening.\n'}, {'title': 'Python: Block comment is three single quotes and not two', 'body': 'When using the block comment feature, only 2 single quotes are put in, instead of three.\n'}, {'title': 'PHP: extension console.logs when completing function', 'body': 'Complete a function and find something in the log:\n\n[Plugin Host] provideSignatureHelp\nworkbench.main.js:1675 [Plugin Host] Object {signatures: Array[1], activeSignature: 0, activeParameter: 0}\n'}, {'title': '[ruby] the mode failed to tokenize the input', 'body': 'Take the ruby file from https://github.com/Homebrew/homebrew/blob/master/Library/Homebrew/os/mac/xcode.rb and paste it into VS Code, you get an exception: the mode failed to tokenize the input\n'}, {'title': '[vb] Block comment is not colored', 'body': 'While line comments are nicely colored, block comments are not.\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBvqIfQ==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Development Environment Improvements (code.bat/code.sh)', 'body': 'There is some work remaining to make the development environment nicer.\n- [x] Do not create the Electron-Build folder outside of the source repository\n- [x] Warn the user when node_modules are missing and a npm install is required\n- [x] Warn the user when he runs npm install and not scripts/npm\n- [x] Warn the user when out folder is missing and gulp watch is required\n'}, {'title': '[xml] Element and attribute in light and dark theme use same colors', 'body': '![image](https://cloud.githubusercontent.com/assets/900690/11178547/cc7e3a50-8c4d-11e5-8e58-fdaeee133c7f.png)\n'}, {'title': 'TypeScript: Error: Promise did not implement oncancel(…)', 'body': 'When I open "crashReporter.ts" (in electron-browser) with VS Code, I get some spam on the console:\n\nWARNING: Promise with no error callback:undefined\nworkbench.main.js:1554 Error: Promise did not implement oncancel(…)\n'}, {'title': 'https://twitter.com/code uses a Visual Studio icon which is confusing', 'body': 'https://twitter.com/code should use a VSCode icon, not the purple/white visual studio icon. This way users can easly confuse the two.\n'}, {'title': "Bundled files don't have a top copyright statement", 'body': "Latest Build, open workbench.main.js.\n\nObserve: the file doesn't have a top copyright statement. It starts with some code. Also observe that at the end of the file there are a lot of MS copyright statements. Seems that bundling doesn't treat them well.\n"}, {'title': 'No blue icon on linux', 'body': 'I see the blue icon with 0.9 builds, but not with 0.10.1 builds.\nOnly a generic tool icon is shown.\n'}, {'title': 'Send a smile > "Submit a bug" should open Github repo', 'body': ''}, {'title': 'Variables in local window stop stop updating their value when stepping through code quickly', 'body': "In a node express app I have the following loop:\n\nvar msg = 'hello world';\nvar i = 0;\nwhile (i < 100) {\n  msg = msg + i.toString();\n  i++;\n}\n\nI set up the local and watch windows in the debugger so that I can see the msg variable in both.\n\nWhen stepping through the loop, if I press F10 very quickly, eventually the msg variable in the locals window will stop updating. See the screenshot below\n![snip_20151116130725](https://cloud.githubusercontent.com/assets/1704059/11182475/068041ca-8c63-11e5-9e27-842b4943cfbe.png)\n\nWhen stepping through quickly, I sometimes see a message in the watch window that says 'Exception while processing request'\n\nThis is on 0.10.0\n"}, {'title': 'Extension uninstall leaves empty directories behind', 'body': 'I install eslint and jshint and uninstalled them again. I still had two directories in ~/.vscode/extensions for dbaeumer.jshint and dbaeumer.eslint with no package.json. On the next start of VSCode it complained about missing package.json files. I needed to delete the folders manually\n'}, {'title': 'Program appears to continue executing after pressing stop in the debugger', 'body': 'In a simple node app, I step through a loop in the debugger. Before exiting the loop, I press the stop button\n![snip_20151116130725](https://cloud.githubusercontent.com/assets/1704059/11185295/f6af8bbe-8c73-11e5-9a4a-f30d84c14b07.png)\nI expect the program to stop executing right at that point but it appears to continue executing due to the fact that the console.log statement is executed (highlighted below) and the value of the string being output looks like the loop continued to execute even after pressing stop:\n![snip_20151116150729](https://cloud.githubusercontent.com/assets/1704059/11185303/ff729908-8c73-11e5-8446-f88aa3559d02.png)\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBvt-6g==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'build errors: vscode.d.ts is not found', 'body': "when running build I am seeing +400 errors, all of them related to vscode.d.ts.\n\n```\n*** Error: vscode/src/vs/workbench/api/common/pluginHostTypes.ts(434,19): Cannot find namespace 'vscode'.\n*** Error: vscode/src/vs/workbench/api/common/pluginHostTypes.ts(437,24): Cannot find namespace 'vscode'.\n*** Error: vscode/src/vs/workbench/api/common/pluginHostTypes.ts(437,46): Cannot find namespace 'vscode'.\n\n....\n\n*** Error: vscode/extensions/declares.d.ts(59,51): Cannot find name 'Thenable'.\n*** Error: vscode/extensions/vscode-api-tests/src/window.test.ts(9,33): Cannot find module 'vscode'.\n*** Finished with 408 errors.\n```\n\n...\n"}, {'title': 'Javascript - regular expressions are not colored - Javascript mode instantiated twice', 'body': 'New **javascript** file, use the following code snippet:\n\n`var booleanRegex = /^true|false$/i;`\n`var stringRegex = /^([\'"]).*\\1$/;`\n\nNotice the regex value **does not get colored**.\nRegex coloring works for Typescript.\n'}, {'title': '[extension] resolving a completion items is call twice for the first selected item in the list', 'body': ''}, {'title': '[Git] weird indicator for renamed file', 'body': '(I am on Mac OS X, Git 2.4.0)\n- have a checked in README.md with some contents\n- take the contents of the file and move it to a new file CONTRIBUTING.md\n- change the text in README.md to something else\n- stage all\n\n![image](https://cloud.githubusercontent.com/assets/900690/11213365/e6561f9e-8d3b-11e5-9bbc-453bfe70d904.png)\n'}, {'title': 'vscode "--extensionHomePath" option does not work when used with the vscode proxy', 'body': 'I\'m developing an extension and want to test its installation from the gallery. After installing it from the gallery, I want to continue development in the VSCode extension host. When launching the extension through F5, I see the annoying extension override warning in the extension host window.\nTo prevent that the ~/.vscode/extensions path is used in that case, I tried to use the " --extensionHomePath" in the extensionHost launch config and specify an empty directory.\nBut it seems that the "--extensionHomePath" isn\'t honoured in this case (probably because vscode is a proxy that connects to an already running vscode).\n\nBTW, it would be cool if "--extensionHomePath" would allow an empty path.\n'}, {'title': 'activeTextEditor not correct while the extension is activated', 'body': '- create the following extension (example for our doc)\n- run the extension. In a workspace create a md file, open it and check that you get the counter in the status bar\n- now reload the workspace while the md file is open. Observer that the md file opens, but the counter is not shown\n\nThe extension activates on "onLanguage:markdown".\nWhen it starts, it prints the current active mode: vs.editor.modes.nullMode\nIt registers for active editor change event, but doesn\'t get any events that tells it that a markdown file has opened.\n\n``` typescript\nimport {window, commands, Disposable, ExtensionContext, StatusBarAlignment, StatusBarItem, TextDocument} from \'vscode\';\n\n// This method is called when your extension is activated. Activation is\n// controlled by the activation events defined in package.json.\nexport function activate(context: ExtensionContext) {\n\n    // Use the console to output diagnostic information (console.log) and errors (console.error).\n    // This line of code will only be executed once when your extension is activated.\n    console.log(\'Congratulations, your extension "WordCount" is now active!\');\n\n    // create a new word counter\n    let wordCounter = new WordCounter();\n    let controller = new WordCounterController(wordCounter);\n\n    // Add to a list of disposables which are disposed when this extension is deactivated.\n    context.subscriptions.push(controller);\n    context.subscriptions.push(wordCounter);\n}\n\nclass WordCounter {\n\n    private _statusBarItem: StatusBarItem;\n\n    public updateWordCount() {\n\n        // Create as needed \n        if (!this._statusBarItem) { \n            this._statusBarItem = window.createStatusBarItem(StatusBarAlignment.Left); \n        }  \n\n        // Get the current text editor \n        let editor = window.activeTextEditor; \n        if (!editor) { \n            this._statusBarItem.hide(); \n            return; \n        } \n\n         let doc = editor.document; \n\n        console.log(\'Current doc language \' + doc.languageId);\n\n        // Only update status if an MarkDown file \n        if (doc.languageId === "markdown") { \n            let wordCount = this._getWordCount(doc); \n\n            // Update the status bar \n            this._statusBarItem.text = wordCount !== 1 ? `${wordCount} Words` : \'1 Word\'; \n            this._statusBarItem.show(); \n        } else { \n            this._statusBarItem.hide(); \n        } \n    } \n\n    public _getWordCount(doc: TextDocument): number { \n\n        let docContent = doc.getText(); \n\n        // Parse out unwanted whitespace so the split is accurate \n        docContent = docContent.replace(/(< ([^>]+)<)/g, \'\').replace(/\\s+/g, \' \'); \n        docContent = docContent.replace(/^\\s\\s*/, \'\').replace(/\\s\\s*$/, \'\'); \n        let wordCount = 0; \n        if (docContent != "") { \n            wordCount = docContent.split(" ").length; \n        } \n\n        return wordCount; \n    } \n\n    dispose() {\n        this._statusBarItem.dispose();\n    }\n}\n\nclass WordCounterController {\n\n    private _wordCounter: WordCounter;\n    private _disposable: Disposable;\n\n    constructor(wordCounter: WordCounter) {\n        this._wordCounter = wordCounter;\n        this._wordCounter.updateWordCount();\n\n        // subscribe to selection change and editor activation events\n        let subscriptions: Disposable[] = [];\n        window.onDidChangeActiveTextEditor(this._onEvent, this, subscriptions);\n\n        // update the counter for the current file\n        this._wordCounter.updateWordCount();        \n\n        // create a combined disposable from both event subscriptions\n        this._disposable = Disposable.from(...subscriptions);\n    }\n\n    dispose() {\n        this._disposable.dispose();\n    }\n\n    private _onEvent() {\n        console.log(\'active editor changed \');\n        this._wordCounter.updateWordCount();\n    }\n}\n```\n\n``` json\n{\n    "name": "WordCount",\n    "description": "Count the words",\n    "version": "0.0.1",\n    "engines": {\n        "vscode": "^0.10.1"\n    },\n    "categories": [\n        "Other"\n    ],\n    "activationEvents": [\n        "onLanguage:markdown"\n    ],\n    "main": "./out/src/extension",\n    "scripts": {\n        "vscode:prepublish": "node ./node_modules/vscode/bin/compile",\n        "compile": "node ./node_modules/vscode/bin/compile -watch -p ./"\n    },\n    "devDependencies": {\n        "typescript": "^1.6.2",\n        "vscode": "0.10.x"\n    }\n}\n```\n'}, {'title': 'broken selection feedback when selecting bold text in markdown files', 'body': "- open a markdown file with bold markup, e.g.\n  abc **text** xyz\n- try to select the line with the mouse starting at 'abc' and slowly extending to 'xyz'\n  Observe: if you reach the second '**', the selection of '**text**' disappears. In the end you have two disconnected selection ranges.\n- in addition I see lots of flashing selection changes while dragging the mouse \n"}, {'title': 'Expected treatment of threads in debug viewlet UI?', 'body': "I’m seeing some odd behavior around how threads are being rendered in the Code debugger for the Go debugger extension.  But I’m also not certain what I should be expecting to see, as I don’t think I’ve seen any examples of debuggers which show thread information in Code.\n\nThe Go debugger returns a list of threads from `DebugSession#threadsRequest`, but these are not displayed anywhere.  However, it seems that if I’ve ever hit a breakpoint on a different thread before, then later breakpoints will cause a second root node to appear in the Call Stack window showing the stacks associated with the 2 threads I've hit breakpoints on at some point (out of the 10 or so threads I’ve reported as existing).\n\nOn the thread that is not the active thread, the call stack displayed appears to be the call stack from the previous breakpoint I was at, not the active call stack on that thread at the current point.  And in fact, in both cases, my `DebugSession#stackTraceRequest` implementation is only being called once (for the thread the breakpoint was hit on), not for any of the other threads I reported.\n\nAfter hitting first breakpoint: \n![screen shot 2015-11-17 at 10 23 37 pm](https://cloud.githubusercontent.com/assets/223467/11234157/f938e69e-8d79-11e5-8096-8cdf907aa2c1.png)\nAfter hitting second breakpoint:\n![screen shot 2015-11-17 at 10 25 09 pm](https://cloud.githubusercontent.com/assets/223467/11234171/1b38f888-8d7a-11e5-91e1-197af530e106.png)\n"}, {'title': 'Update vscode extensions to package.json schema', 'body': "Remove 'updateChannels'\n"}, {'title': 'Document symbols are duplicated', 'body': "When adding a 2nd document symbol provider, let's say for typescript, all entries are duplicated. When adding a 3rd, they are triplicated, etc...\n"}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwJozw==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Wakatime plugin', 'body': "Oh, how I would love to have a [WakaTime](https://wakatime.com/) plugin for Visual Studio Code! Don't know if that should have an issue here, as the code'll be elsewhere. But I'll close it if I manage to get it done.\n\nBTW: Great that you opensourced VS Code! I just saw Erich Gamma open source it on Connect(). Amazing, he's the same guy I read the Design Patterns book from during my studies right :P.\n"}, {'title': 'Disabling telemetry before first run does not work', 'body': 'If I edit `product.json` as recommended in the [instructions for disabling telemetry on OS X](https://code.visualstudio.com/Docs/supporting/FAQ#_how-to-disable-telemetry-reporting) before running  VS Code for the first time, I get the following error message upon opening it:\n\n<img width="420" alt="monosnap rpzk7" src="https://cloud.githubusercontent.com/assets/524783/11246186/83c9d7a2-8e0e-11e5-8123-37ec637a2793.png">\n\nIf I download VS Code, run it once, quit it, and _then_ edit `product.json`, it works fine.\n\nThis is on OS X Yosemite 10.10.5.\n'}, {'title': 'Commenting using ctrl+k,ctrl+c does not work for JSX files', 'body': 'Block commenting using ctrl+k,ctrl+c does not work for JavaScript React JSX files.\n'}, {'title': 'Running Code should open a new instance, not activate a currently opened one', 'body': "Ubuntu 12.04, vscode 0.10.1\n\nCurrently when you run `Code` if there is an instances already running (or shift clicking the app icon in Windows/Ubuntu) it will activate the currently opened window. This should open a new instance, the same goes for opening a new instance of `Code` with a folder as an argument when an instance is already open.\n\nIt's a very common use case for many developers to have multiple editors with the same folder open.\n\n**Repro:**\n1. `Code` (open instance of vscode)\n2. `Code`\n\n**Expected:**\nA new instance of vscode is opened\n\n**Actual:**\nThe current instance of vscode is activated\n"}, {'title': 'Crash when opening Code via the command line', 'body': 'Ubuntu 12.04, vscode 0.10.1\n\nNote that I have file symlinks setup for these config files which could having something to do with this crash:\n- `~/.config/Code/User/keybindings.json`\n- `~/.config/Code/User/settings.json`\n\n**Repro:**\n1. Open terminal\n2. `Code &`\n3. Open another terminal (at `~`)\n4. `Code . &`\n\n**Expected:**\nvscode opens successfully\n\n**Actual:**\nCrash:\n\n```\nA JavaScript error occurred in the main process\n\nUncaught Exception:\nError: watch ENOSPC\n    at exports._errnoException (util.js:837:11)\n    at FSWatcher.start (fs.js:1247:11)\n    at Object.fs.watch (fs.js:1273:11)\n    at e.registerWatchers (/home/local/ANT/daniimms/VSCode-linux-x64/resources/app/out/vs/workbench/electron-main/main.js:7:3462)\n    at new e (/home/local/ANT/daniimms/VSCode-linux-x64/resources/app/out/vs/workbench/electron-main/main.js:7:3207)\n    at Object.<anonymous> (/home/local/ANT/daniimms/VSCode-linux-x64/resources/app/out/vs/workbench/electron-main/main.js:7:4907)\n    at e._invokeFactory (/home/local/ANT/daniimms/VSCode-linux-x64/resources/app/out/vs/loader.js:5:13773)\n    at e._complete (/home/local/ANT/daniimms/VSCode-linux-x64/resources/app/out/vs/loader.js:5:14012)\n    at e.resolveDependency (/home/local/ANT/daniimms/VSCode-linux-x64/resources/app/out/vs/loader.js:5:15066)\n    at e._onModuleComplete (/home/local/ANT/daniimms/VSCode-linux-x64/resources/app/out/vs/loader.js:5:21369)\n```\n'}, {'title': 'Fix add selection above and add selection below hotkey on Ubuntu', 'body': "I'm used to `alt+shift+up` and `alt+shift+down` expanding the selection above and below the current anchor, as far as I can see this is not implemented in core or an extension.\n\nEdit: This is actually implemented and working fine, the hotkey ctrl+alt+up/down just conflicts with the Ubuntu OS hotkey to change workspace.\n"}, {'title': "Interpolation strings don't have colouring", 'body': "After the update, interpolation strings in a plain `.js` file don't get highlighted anymore. Previous behaviour highlighted plain text, the `$` symbol and the interpolation braces. Now everything between _``_ has no colouring at all.\n\n```\nfunction sayHello(customer)\n{\n    console.log(`Hello ${customer}`);\n}\n```\n\n![nocolours](https://cloud.githubusercontent.com/assets/2777107/11246534/59e31da4-8e18-11e5-883a-80d6fb8ff34b.PNG)\n"}, {'title': 'It should be possible to include paths in search in Go to file dialog', 'body': "**Repro:**\n1. `mkdir -p foo/bar`\n2. `echo 'test' > foo/bar/test`\n3. `Code .`\n4. `Ctrl+P` to open Go to file\n5. Type `foo/bar/test`\n\n**Expected:**\nThe test file is the best match\n\n**Actual:**\nNo matches found\n"}, {'title': 'ES6 jsconfig.json error', 'body': 'I am incorrectly getting the following error, **"This can only be used with ES6. Make sure to have a jsconfig.json-file which sets the target to ES6"**.\n\nFurthermore, I think I may have stumbled upon a weird case where if the start of the file name is "temp" as in "temp.js", "temporary.js", or "temp123.js" it will cause this error.\n\nTo reproduce:\nCreate a file called temp.js with some ES6 code, such as:\n\n```\nlet x = 10\n```\n\nThe above error is now showing. To fix it, create the jsconfig.json file which sets the target to ES6:\n\n```\n{\n    "compilerOptions": {\n        "target": "ES6"\n    }\n}\n```\n\nThe error is still showing, now incorrectly.\n\nIf I rename "temp.js" to "test.js" (or anything that doesn\'t start with \'temp\') the error goes away. Or, if I create a files array in jsconfig.json which lists "temp.js", the error goes away:\n\n```\n{\n    "compilerOptions": {\n        "target": "ES6"\n    },\n    "files": [\n        "temp.js"\n    ]\n}\n```\n\nI don\'t want to have to do this for every file in my project.\n\nI\'m running on Windows 7, 64-bit.\n\nThanks\n'}, {'title': 'Searching large projects is too slow', 'body': 'Ubuntu 12.04, vscode 0.10.1\n\nI have found Go to file\'s indexing against a full Chromium workspace to be very slow. It took ~40 seconds to find "Tab.java" whereas a simple `find` command took less than a second:\n\n```\n$ time find . -name "Tab.java"\n./chrome/android/java/src/org/chromium/chrome/browser/tab/Tab.java\n\nreal    0m0.559s\nuser    0m0.268s\nsys 0m0.284s\n```\n\nNote that the workspace is on an SSD.\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwLOpw==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Middle clicking a working file in the working file list should close it and remove it from working files', 'body': "Ubuntu 12.04, vscode 0.10.1\n\nSeems like an easier/intuitive shortcut instead of trying to hit the tiny `x` button's hitbox.\n\n**Repro:**\n1. Open vscode\n2. Open a folder\n3. Open and edit a file\n4. Middle click the file in working files\n\n**Expected:**\nThe file should be closed and removed from working files (with are you sure/save dialog)\n\n**Actual:**\nNothing\n"}, {'title': "Git integration doesn't work if the open folder in a sub-folder of a git repository", 'body': "Ubuntu 12.04, vscode 0.10.1\n\nThe main reason I want this is to get around slow go to file indexing https://github.com/Microsoft/vscode/issues/55 by opening a sub-directory in Chromium so that indexing it doesn't take very long. Traversing the file path upwards to the root directory should be a fairly quick to perform action.\n\n**Repro:**\n1. `mkdir -p foo/bar`\n3. `cd foo`\n4. `git init`\n5. `Code bar`\n6. Open git integration tab\n\n**Expected:**\nGit integration realises that `bar` is part of the repo\n\n**Actual:**\nGit integration disabled\n"}, {'title': 'Provide API to open a new folder', 'body': 'This is essential to creating a project manager extension, it would be best if there was the option to open in a new instance or an existing instance of code.\n'}, {'title': 'Cannot attach debugger to a node.js application running inside a Docker container', 'body': 'I\'m trying to attach the Visual Studio Code debugger to a node.js app that is running inside a Docker container.\n\nThe app starts like:\n\n``` sh\nnode --debug-brk app.js\n```\n\nMy `docker-compose.yml` exposes the port for attaching:\n\n``` yml\napp:\n  build: .\n  working_dir: /code\n  volumes:\n    - .:/code\n  command: npm run debug\n  ports:\n    - "3004:3000"\n    - "5858:5858"\n```\n\n`launch.json` is pretty simple:\n\n``` json\n{\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "name": "Docker",\n            "type": "node",\n            "request": "attach",\n            "port": 5858\n        }\n    ]\n}\n```\n\nNow, when I start the application and attach the debugger this will correctly connect (I can see the values flashing in the debugger UI already), but then it will stop, telling me the following:\n\n> Error opening \'app.js\' (File not found: /code/app.js).\n\nIs there any way to fix this path offset? Should one handle this scenario completely different?\n'}, {'title': 'Menu license links to non Open Source license', 'body': "I've just downloaded it:\n\n```\nVersion 0.10.1\nCommit df352367df2efcfa9d602d471e4e2f42140a0f05\nDate 2015-11-17T15:21:23.766Z\nShell 0.34.1\nRenderer 45.0.2454.85\nNode 4.1.1\n```\n\nThe license link points to _non Open Source_ license:\nhttps://code.visualstudio.com/license#vscode\n\nFor example:\n\n```\n[...] users cannot opt out of data collection [...]\nYou may not\n* work around any technical limitations in the software;\n```\n"}, {'title': 'Go to definition and navigate back puts cursor in wrong spot', 'body': 'Use Go To Definition (F12) on a function call to jump to its definition.  Then immediately use "Back" (Ctrl-minus).  Your cursor will not be back to where it was when you hit F12.  Sometimes it\'s just off a character, other times it\'s several lines away.\n\nIt seems to be more consistently reproducible when jumping between files and jumping to a file that\'s not already in the "Working Files" area.  Even jumping within a file by repeatedly doing F12, Ctrl-minus will eventually jump to the wrong spot.\n\nThis was happening while using the Go plugin with v0.10.1 on Mac OS X 10.10.5\n'}, {'title': 'File Search got stuck with a great number of files', 'body': 'File search (CTRL + E) got stuck with a great number of files (around 60k files on 5k folders) when searching for a file by its name. It took too long to find the file and sometimes the search bar suddenly disappeared.\n'}, {'title': 'Rounded selection seems broken due to current word highlight', 'body': "editor.roundedSelection is broken\n- If our selection doesn't span multiple lines, the selection is still squared.\n\n![snip_20151118224023](https://cloud.githubusercontent.com/assets/10473142/11248132/85ecf492-8e45-11e5-9faa-45626737db89.png)\n![snip_20151118224059](https://cloud.githubusercontent.com/assets/10473142/11248133/88d891a2-8e45-11e5-98ab-fb87d1278a19.png)\n"}, {'title': 'We need translation support', 'body': 'Hi,\n\n@jrieken @chrisdias \n\nWe need translation support.\n\nBtw, I can help with French & German.\n\nThanks,\nHLFH\n'}, {'title': 'Git conflict highlighting can get messed up easily', 'body': 'Ubuntu 12.04, vscode 0.10.1\n\nDeleting and undoing the line doubles the highlight: (stays after closing and reopening the file)\n\n![highlight1](https://cloud.githubusercontent.com/assets/2193314/11248144/728d1290-8dd4-11e5-843d-b1207570c8e0.png)\n\nDeleting from the end of the line above the `=======` to the end of the line starting with `>>>>>>>`:\n\n![highlight3](https://cloud.githubusercontent.com/assets/2193314/11248233/e578f95e-8dd4-11e5-92a9-603361d90e59.png)\n\nUndoing the above results in this:\n\n![highlight2](https://cloud.githubusercontent.com/assets/2193314/11248196/ad1667fe-8dd4-11e5-989b-0fe74bb599d1.png)\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwL4aA==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Electron-Build has wrong filename for the .exe', 'body': 'When I run `scripts/code`, I get the following output:\n\n```\nC:\\Users\\Owner\\Documents\\vscode>scripts\\code\n[11:17:09] Using gulpfile ~\\Documents\\vscode\\gulpfile.js\n[11:17:09] Starting \'electron\'...\n[11:17:09] Finished \'electron\' after 459 μs\n\'..\\Electron-Build\\Code.exe\' is not recognized as an internal or external command,\noperable program or batch file.\n```\n\nLooking in the Electron-Build directory, there\'s no executable named `Code.exe`, but there is one named `Code [OSS Build].exe`. Is this an oversight from open sourcing the application?\n\nEdit: Running `"..\\Electron-Build\\Code [OSS Build].exe" .` from the vscode checkout works, so it\'s not a blocker, just a stumbling block.\n'}, {'title': 'Git: Support git history in VSCode', 'body': 'It would be awesome to be able to squash commits right from the UI too\n'}, {'title': 'Proxy support for extension gallery', 'body': "Whenever I try to install any extension, using _ext install_, I get a **connect ETIMEDOUT 191.238.172.191:443** error.\n\nTrying to navigate to **https://191.238.172.191** in the browser produces a warning regarding the certificate being valid only for ***.market.visualstudio.com**, but I'm allowed to proceed.\n\nShouldn't VSCode try to connect to the name instead of the IP?\n\nI'm behind a proxy, VSCode updates just fine behind it, and also lists the available extensions. The firewall here logs the invalid certificate but allows the connection to proceed. Doesn't look like a problem in my end...\n\n**OS:** Windows 7\n**VSCode:** 0.10.1\n"}, {'title': '[xml] provide a formatter', 'body': 'before the update I could use alt+shift+f to code format an xml file. After the update this no longer works (using windows version 0.10.1)\n'}, {'title': 'add support for TFVC in on-premise TFS resp. Visual Studio Team Services', 'body': 'both TFS 2015 and VSO support REST API to access TFVC besides GIT and therefore it would be possible to add basic support for TFVC.\n'}, {'title': 'Vim modal editing', 'body': 'Hi, I wanted to ask, if anyone is already working on a plugin for vim like modal editing and is looking for some help?\n'}, {'title': 'Allow overriding hardcoded jsconfig/tsconfig defaults', 'body': 'I\'m writing pretty much all of my projects using ES6.\nSo if I want to use Code, I need to add `jsconfig.json` file that contains following snippet to every project I work on:\n\n```\n{\n  "compilerOptions": {\n    "target": "es6"\n  }\n}\n```\n\nDoing this over and over again is annoying to say the least.\n\nI had a quick look at the code and from what I\'d grasped the current defaults are hardcoded.\nCan we instead have a global default `jsonfig.json` in user folder (e.g. next to user config) that\'ll override hardcoded defaults if present? \nOr perhaps part of user config can allow overriding values in it (e.g. `javascript.compilerOptions.target`)?\n'}, {'title': 'Allow to theme UI components of the workbench', 'body': 'Currently I cannot change the style of the editor "frame", for example, sidebar color, padding or font. This makes some themes (like Solarized) looks inconsistent with the editor UI.\n'}, {'title': 'Simplify shell command for Linux and OS X', 'body': 'Is there a shell command out of the box to launch VSCode?\n\nAtom has `atom`\nSublime has `subl`\n'}, {'title': 'use .gitignore to ignore search inside files and folders', 'body': 'use .gitignore to know which files and folders not to search into (think `node_modules` or `packages`)\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwMktQ==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Getting "Visual Studio Code has crashed" a few times', 'body': 'The last three days, when I come into work, I get this dialog. Is there an error log or crash dump I can attach that will help to diagnose?\n'}, {'title': 'Windows setup file version', 'body': 'windows setup not have a file version and when hover cursor 0.0.0.0 shown. please set setup file version\n'}, {'title': "react file with .js extension and JavaScript React language doesn't work very well", 'body': '# errors\n\n![2015-11-18 16_15_18-view js - cis-v2-frontend - visual studio code](https://cloud.githubusercontent.com/assets/941075/11249737/e115e850-8e0f-11e5-9566-3c5ae0164e77.png)\n![2015-11-18 16_15_32-view js - cis-v2-frontend - visual studio code](https://cloud.githubusercontent.com/assets/941075/11249738/e135b748-8e0f-11e5-8035-3d0922cd6680.png)\n# .js file with errors\n\n![2015-11-18 16_17_12-](https://cloud.githubusercontent.com/assets/941075/11249739/e1423cac-8e0f-11e5-913e-11b7fe65f755.png)\n# .jsx file without errors\n\n![image](https://cloud.githubusercontent.com/assets/941075/11249820/57dbe4e4-8e10-11e5-96a4-fee57f5243d4.png)\n'}, {'title': 'Extension docs page gives a 404', 'body': 'This page: https://code.visualstudio.com/docs/extensions linked from the bottom of https://www.visualstudio.com/en-us/products/code-vs.aspx is returning a 404.\n'}, {'title': 'Add more mouse gestures for multi-cursor', 'body': 'Please Implement Column Mode selection/editing. \n\nPreviously requested here\nhttps://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7761618-implement-column-mode-selection-editing\n\nOn Mac preferred shortcut is cmd+option(alt) like Sublime Text does.\n'}, {'title': 'Go Plugin: Show Method Type in Symbol Browser', 'body': 'When using the symbol browser, I have methods that are bound to different types of the same name:\n\n![image](https://cloud.githubusercontent.com/assets/1692624/11250408/6e55bed6-8dfa-11e5-8510-0f268552c192.png)\n\nIt would be nice to see which type each of those methods are for in that view.\n'}, {'title': 'PHP autocompletion: $_GET completes into $$_GET', 'body': 'When using autocompletion for variables it places 2 dollar signs instead of 1. For example typing $_GET will transform it into $$_GET. Fails with every completion starting with $.\n'}, {'title': 'Node error for Import saying no exports for files that use module.exports', 'body': 'Test Node project, saying error for these `Imports`, even though they are in fact `export`ing something.\n\n![image](https://cloud.githubusercontent.com/assets/2574412/11250803/4e8adf4e-8dfc-11e5-8577-1c6b1c88cc4b.png)\n\n![image](https://cloud.githubusercontent.com/assets/2574412/11250814/5d419dfc-8dfc-11e5-9642-6945e87c401f.png)\n'}, {'title': 'Console is difficult to work with on a small screen', 'body': "While working on my laptop, I found it difficult to use the debug console. For example, consider this screen:\n\n![image](https://cloud.githubusercontent.com/assets/393660/11250992/0683cb24-8de4-11e5-9580-0e6e96628e1c.png)\n\nI was able to adjust the side of the code on the right, and hide files:\n\n![image](https://cloud.githubusercontent.com/assets/393660/11251007/1b957f58-8de4-11e5-9b39-707239321f7e.png)\n\nBut note there is _still_ text I can't see that bleeds off the right hand side. \n\nIs there any way to wordwrap?\n"}, {'title': 'Add C/C++ support', 'body': "I was surprised that VSCode didn't supported C/C++ :(\n\nNeed to add this language and CMake/Make as well...\n"}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwNSsA==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Document language type', 'body': 'On this page, https://code.visualstudio.com/docs/extensionAPI/activation-events, specifically: activationEvents.onLanguage\n\nHow does one determine the string that is valid for onLanguage? For example, in my CSS file, would I use:\n\ncss\nCSS\nstylesheet\n\netc? \n'}, {'title': 'Incorrect Breakpoint bindings when using source maps', 'body': 'I’m seeing an issue in VS Code when debugging a TypeScript file with Source Maps that uses TypeScript Async Functions. When I set a breakpoint on the first line of the function body, the breakpoint moves to the first executable line following the end of the function body. I’m trying to determine if this is an issue with TypeScript’s SourceMap output, with VS Code, or with the version of V8 used by VS Code.  I’ve tested the same scenario in Chrome Canary and breakpoints seem to bind correctly, which leads me to believe the issue may not be with TypeScript.\n\nAfter further discussion, it looks like the issue is in the `node-debug` extension. Changing the default from `Bias.GREATEST_LOWER_BOUND` to `Bias.LEAST_UPPER_BOUND` seems to solve the problem.\n\nCC: @weinand \n'}, {'title': 'Unable to launch application on OSX', 'body': "When doing a fresh download, copying `Visual Studio Code.app` to `/Applications`, and executing I receive the error: `The application “Visual Studio Code.app” can’t be opened.`\n\nUpon looking at the console logs I see the following errors:\n\n```\n11/18/15 11:44:47.046 lsd[371]: LaunchServices: Could not store lsd-identifiers file at /private/var/db/lsd/com.apple.lsdschemes.plist\n11/18/15 11:44:47.049 lsd[371]: LaunchServices: Could not store lsd-identifiers file at /private/var/db/lsd/com.apple.lsdschemes.plist\n11/18/15 11:44:47.058 com.apple.xpc.launchd[1]: (com.apple.xpc.launchd.oneshot.0x10000046.Atom[62821]) Could not find and/or execute program specified by service: 2: No such file or directory: /Applications/Visual Studio Code.app/Contents/MacOS/Atom\n11/18/15 11:44:47.058 Finder[749]: spawn_via_launchd() failed, errno=111 label=[0x0-0x11dc1db].com.github.atom-shell path=/Applications/Visual Studio Code.app/Contents/MacOS/Atom flags=1 : LaunchApplicationClient.cp #963 LaunchApplicationWithSpawnViaLaunchD() q=com.apple.root.default-qos\n11/18/15 11:44:47.058 Finder[749]: spawn_via_launchd() failed, errno=111 label=[0x0-0x11dc1db].com.github.atom-shell path=/Applications/Visual Studio Code.app/Contents/MacOS/Atom flags=1\n11/18/15 11:44:47.061 lsd[371]: LaunchServices: Could not store lsd-identifiers file at /private/var/db/lsd/com.apple.lsdschemes.plist\n```\n\nIt appears that the App is looking for `/Applications/Visual Studio Code.app/Contents/MacOS/Atom` when the correct path should be `/Applications/Visual Studio Code.app/Contents/MacOS/Electron`\n\nI'm attempting to upgrade from the original beta, is there something else that needs to be removed to properly make the transition besides deleting the old App in `/Applications`?\n"}, {'title': 'Documentation issue for Extensions, LanguageServer', 'body': 'On this page, https://code.visualstudio.com/docs/extensions/example-language-server, debugging the server is described like so:\n\n"Since the server is started by the LanguageClient running the extension we need to attach a debugger to the running server. To do so switch to the VS Code instance containing the server code and press F5. This will attach the debugger to the server. Use the normal Debug View to interact with the running server."\n\nI\'ve tried this multiple times now and every time I do, the server fails to debug. I get this error:\n\ncannot connect to runtime process (timeout after 5000ms)\n'}, {'title': 'VSCode very slooow when opening minified css file', 'body': 'Mac OS X El Capitan, 10.11.1, \nVSCode 0.10.1\ncss file size: 116,198 bytes (119 KB on disk)\n\nThe attached file was built with a minifier as part of a grunt task to build the distributable files of a website. Tried to open the file several times to make sure that file is the issue. The app eventually shows a dialog that says "Visual Studio is no longer responding" \n\nWhen I reopen VSCode after the crash, the folder has been forgotten, it opens to a different folder. When is the "current" folder updated to the existing folder?\n\nI added the .txt extension in order to add it here. The file extension was originally just .css\n\n[main.08642f99.css.txt](https://github.com/Microsoft/vscode/files/38262/main.08642f99.css.txt)\n'}, {'title': 'ES6 support does not work', 'body': 'When I open any file in my ES6 Javascript project, every single line is underlined in red, with errors like:\n\n![screen shot 2015-11-18 at 12 03 09 pm](https://cloud.githubusercontent.com/assets/79215/11252725/88d3c130-8dec-11e5-9b18-3f5bc4337bfe.png)\n\nIn my project\'s root, I have a `jsconfig.json` file with the following contents:\n\n```\n{\n    "compilerOptions": {\n        "target": "ES6",\n        "module": "commonjs"\n    },\n    "files": [\n        "app/"\n    ]\n}\n```\n\nThe file in question lives inside the `app` folder.\n'}, {'title': 'Add support for Perl5 symbol indexing', 'body': 'There doesn\'t seem to be a way to force indexing of Perl5 files for symbol harvesting, so the "Go to definition" and "Go to Symbol" do nothing (without any feedback to the user) when clicked for Perl5 (and likely, Perl6) files in a project.\n'}, {'title': 'Support user-wide installations', 'body': 'I run under a standard user account on my machine, and the installer requires administrator rights, which means running it in the context of a different (administrator) user account. After choosing the "Add to PATH" option, the installer adds `;C:\\Program Files (x86)\\Microsoft VS Code\\bin` to the user PATH variable of that admin account instead, making it unavailable to me.\n\nI guess the installer should add to the machine PATH instead? It would also be great if the installer could be run under a standard user instead, installing vscode to `%LOCALAPPDATA%\\Programs`, or give the option whether to install for all users or just the current user.\n'}, {'title': 'Type Definition imports not working for *.ts files', 'body': 'A couple things related to type definitions don\'t seem to work for *.ts files (features currently working fine for *.js files).\n1. Green underlining with "Download type definition" suggestion does not appear. Instead, just a red underline with message "Cannot find name xxxxx"\n2. Project-wide type definition references do not automatically load in *.ts files.\n\nA workaround is manually pasting the relevant ///<reference path="../../.../typings/xxxx.d.ts" /> includes at the top of every *.ts file.\n'}, {'title': 'GitHub link on page is broken', 'body': 'https://code.visualstudio.com/Home/Connect points to https://github.com/Microsoft/vscode-distro/ which is a 404\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwOVlQ==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Unsaved files should be preserved on quit (hot exit)', 'body': "Mac OSX 10.10.5 Yosemite, VS Code 0.10.1\n\nModern apps have a convention of not losing changes when the application quits and files haven't been explicitly saved. Sublime Text is particularly nice in this regard, where newly created or unsaved files are silently preserved on quit and restored when it is launched again. This would be nice for VS Code to support as well.\n\n**To Reproduce**\n1. Make changes to a file, or create a brand new unsaved file\n2. Quit VS Code\n\n**Desired Behavior**\n\nVS Code immediately quits with no prompt. After relaunching the changed file is restored with changes intact and an unsaved indicator.\n\n**Actual Behavior**\n\nVS Code prompts you to save the file or discard your changes.\n"}, {'title': 'Environment variables are not being defined while debugging', 'body': 'I use VS Code to start a debugging session and in the configuration I define a value for PORT yet it is always undefined. I cannot seem to access these environment variables. Is there another way to access these environment variables?\n\n`var port = process.env.PORT || 8001;`\n\nBelow is the launch.json that I am using for a sample project to try to access environment variables. I\'d like to be able to use launch configurations to create multiple configurations with different environment variables.\n\n```\n{\n    "version": "0.1.0",\n    // List of configurations. Add new configurations or edit existing ones.\n    "configurations": [\n        {\n            // Name of configuration; appears in the launch configuration drop down menu.\n            "name": "Launch server.js",\n            // Type of configuration.\n            "type": "node",\n            // Workspace relative or absolute path to the program.\n            "program": "server.js",\n            // Automatically stop program after launch.\n            "stopOnEntry": false,\n            // Command line arguments passed to the program.\n            "args": [],\n            // Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.\n            "cwd": ".",\n            // Workspace relative or absolute path to the runtime executable to be used. Default is the runtime executable on the PATH.\n            "runtimeExecutable": null,\n            // Optional arguments passed to the runtime executable.\n            "runtimeArgs": ["--nolazy"],\n            // Environment variables passed to the program.\n            "env": {\n                "NODE_ENV": "development",\n                "PORT" : 8005\n            },\n            // Use JavaScript source maps (if they exist).\n            "sourceMaps": false,\n            // If JavaScript source maps are enabled, the generated code is expected in this directory.\n            "outDir": null\n        },\n        {\n            "name": "Attach",\n            "type": "node",\n            // TCP/IP address. Default is "localhost".\n            "address": "localhost",\n            // Port to attach to.\n            "port": 5858,\n            "sourceMaps": false\n        }\n    ]\n}\n```\n'}, {'title': "Tabs don't update column counter", 'body': "Repro:\n1. Hit the tab key\n2. Column count in gutter doesn't update\n\n![tabsdontupdatecolumns](https://cloud.githubusercontent.com/assets/972891/11254395/4745d61e-8df5-11e5-8c25-75383824e586.gif)\n\nForgive the GIF quality.\n"}, {'title': "[markdown] Markdown lists aren't being themed correctly", 'body': 'Making a custom theme using every possible scope for a Markdown list and can\'t style them. However, if I style "punctuation", the lists get styled. \n'}, {'title': 'Enable code folding and collapsing', 'body': 'I searched but couldnt find this in the issues. Id love to be able to collapse sections of the code. Any thoughts?\n'}, {'title': "VMW Workstation: VS Code hits 97% CPU and won't start for a couple of minutes", 'body': "I'm in VMW Workstation 11.1.3 with a 8GB/single core/Win764bit and when I start code.exe from the start menu, it jumps to 97% of cpu and will take a couple of minutes to start.  I'm not opening any folders with code or doing anything with the commandline, this is a plain vanilla start from the menu.  I also noticed that I can sometimes speed up the starti[ by starting 4 or 6 instances (each click from the start menu seems to start 2 instances in the taskmanager, but not the desktop) and then the ide will kick in, but I'm left with all the instances until I shut down the ide and then all instances close.\n\nI've seen this same behavior on VMs I've created at work and at home (not the same VM on two different computers).\n"}, {'title': 'File Language is not persisted when file is closed and reopened', 'body': '![code](https://cloud.githubusercontent.com/assets/941075/11254833/1a063b96-8e2a-11e5-97a9-412e6b7a2499.gif)\n'}, {'title': 'Feature: SSL Settings', 'body': 'My company uses a proxy with SSL inspection, i cant find a way to set allowed trusted certificates.\n\nCheers\n'}, {'title': 'License - clarify the "Data" section', 'body': "On the website's [license page](https://code.visualstudio.com/License), I'm interested in this section:\n\n>  DATA. The software may collect information about you and your use of the software, and send that to Microsoft. Microsoft may use this information to provide services and improve our products and services. **For this pre-release version, users cannot opt out of data collection. There may also be some features in the software that enable you to collect data from users of your applications.** If you use these features to enable data collection in your applications, you must comply with applicable law, including providing appropriate notices to users of your applications. You can learn more about data collection and use in the help documentation and the privacy statement at http://go.microsoft.com/fwlink/?LinkID=528096&clcid=0x409. Your use of the software operates as your consent to these practices. \n\n**Emphasis** mine. My employer has concerns about this section. We'd love to have VS Code as an option - are there plans to revise this section after Code has a public release? Or perhaps a clearer description of what data is being collected and sent from users?\n"}, {'title': "Middle click paste doesn't work on Linux", 'body': "On linux, whenever you select some text, this text is automatically placed onto a separate X11 clipboard called PRIMARY. This can then be pasted anywhere by middle clicking.\n\nThis works (pretty much) everywhere - including other electron apps like Atom - but doesn't work in Visual Studio Code, sadly.\n\nVSCode Version:\n\nVersion 0.10.1\nCommit df352367df2efcfa9d602d471e4e2f42140a0f05\nDate 2015-11-17T15:21:23.766Z\nShell 0.34.1\nRenderer 45.0.2454.85\nNode 4.1.1\n\nLinux Version:\n\nUbuntu 13.10\n"}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwPPkA==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Extension API: cursor position (determining current location and moving it)', 'body': 'Seems like the only way to get the current cursor position is if the user explicitly selects something.\n'}, {'title': 'Debug Console: Copy multiple lines', 'body': 'Enable copying of multiple lines (e.g. all highlighted lines) from the debug console.\n\nRepro:\n1. Select several lines in debug console\n2. Right click->copy\n3. Only one line is copied.\n'}, {'title': '[stylus] Add Stylus language support', 'body': "I would like to have full Stylus language support, the same we already have for Sass and Less.\n\nColoring is already available with `tmLanguage`, but we should have full intellisense support, errors, warnings etc.\n\nI've already taken a look at the way Sass was built, and if you would like to have this improvement in VSCode core, I can contribute with a PR.\n\nIf there is any way to do that as an extension (but using the power of Monarch etc), I'll be glad if you give some guidelines of how I can achieve that.\n\nThanks in advance.\n"}, {'title': 'Keybinding: Allow colon to be a valid keybinding', 'body': 'Working on a [VIM extension](https://github.com/VSCodeVim/Vim). A core key binding of VIM is `:`.\n\nThe below is a workaround:\n\n```\n     {\n        "key": "Shift+;",\n        "command": "extension.vimMode_colon",\n        "when": "editorTextFocus"\n      },\n```\n\nbut it doesn\'t work on international keyboards.\n'}, {'title': 'Odd code in vscode/src/vs/editor/common/modes/lineStream.ts', 'body': '```\nprivate actualStringToArray(str:string):boolean[] {\n    var maxCharCode = 0;\n    for (var i = 0; i < str.length; i++) {\n        maxCharCode = str.charCodeAt(i);\n    }\n    var r = [];\n    for (i = 0; i < maxCharCode; i++) {\n        r[i] = false;\n    }\n    for (i = 0; i < str.length; i++) {\n        r[str.charCodeAt(i)] = true;\n    }\n    return r;\n}\n```\n\nis the first loop supposed to find the largest Char code?  at the moment it will just return the the last character in str.\n'}, {'title': 'ASP.NET 5 rc1 application showing unresolved items ', 'body': 'Same application in Atom is fine. Application runs without issue. application created using \n\n`yo aspnet`, basic web application no auth. ran `dnu restore`\n\nCode - Version 0.10.1 (0.10.1)\n\n![screen shot 2015-11-18 at 4 56 45 pm](https://cloud.githubusercontent.com/assets/7681382/11255723/c0ad8b80-8e15-11e5-8590-39c91c53f176.png)\n\n@chrisdias \n'}, {'title': 'RST language support', 'body': "I'd love to see support for ReStructuredText ( http://docutils.sourceforge.net/docs/user/rst/quickref.html ) as it would make one of my current projects a lot simpler. It's similar but not identical to Markdown.\n"}, {'title': 'Support running extension tests through cmd line', 'body': 'Add support for running plugin/extension tests through the command line. This is particularly useful for things like CI. I was able to setup gulp+mocha, but any tests that reference `vscode` doesn\'t work.\n\nParaphrasing @bpasero, "this is a consequence of having an extension host that runs your plugin. This host is really the entire VS Code app and cannot be emulated from the command line easily. "\n'}, {'title': 'TypeScript: Code styling broken when no EOL semi-colons', 'body': 'v 0.10.1\nTheme: Dark\n\nCode styling is broken when not using semi-colons ";" for end of line.\nI have my tslint to force excluding ";"\n\nIf I add a semi-colon to line 6, it all works again\n\n![capture](https://cloud.githubusercontent.com/assets/1139901/11255957/e2d53968-8e94-11e5-9af9-00bff41199d9.PNG)\n'}, {'title': 'Polymorphic this (TS 1.7)', 'body': 'is not accepted as valid TS. See https://github.com/Microsoft/TypeScript/pull/4910\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwPk7w==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Add Python support', 'body': ''}, {'title': 'Regression: editor text is blurry on Linux with 125% text scaling', 'body': "Using Arch Linux with Gnome/Gtk+ 3.18.\n\nIn versions 0.9.2 and below, VS Code ignored the text scaling factor in Gnome 3 and rendered its UI text at 100% scale instead of 125% as I had set. (The text scaling factor can be set with gnome-tweak-tool.) To compensate, I set the editor text size to 17, which worked fine.\n\nAs of 0.10.1, VS Code now seems to respect the text scaling factor. However, the editor text is noticeably blurry. Changing the editor text size or font does not help. The UI text, on the other hand, seems to be rendered correctly.\n\nI've uploaded comparisons here: http://imgur.com/a/nPLUP\nI recommend you view them at 1:1 scale to see the differences clearly.\n"}, {'title': 'Improve the explorer view to match full VS design', 'body': "Hello,\n\nI use VS Code daily at work and at home since the very first preview release and I love it.\n\nI do have a major concern though about the way the differents files are shown in the 'Working Folder' view : they're all formatted in the same, plain way, and it is actually quite hard to distinguish what is what when looking at it (especially folders vs files). In a previous release, I recall the folder names were bold. It was better but nonetheless not enough.\n\nI think this image below can describe pretty well what I suggest:\n![folderview](https://cloud.githubusercontent.com/assets/3266897/11257610/fe34751c-8e52-11e5-9a98-7d7302611ddf.png)\nThe same solution is opened in both Code and full VS, and obviously the latter works way better with icons and varying font weight.\n\nWould it be possible to achieve a similar look with Code ? I don't know about reusing the full VS assets since it might be a problem with licensing and stuff though. I gave a look at the new extension API but it specifically states that it doesn't allow for DOM manipulation, so I guess it's a no-go.\n\nIf it's not in the priorities of the dev team (I understand there are way more important stuff to work on in the short term), would you accept a PR that would bring such a feature ?\n\nThank you for your time and your awesome work,\nJabX\n"}, {'title': "Goto Symbol doesn't show all functions defined inside the file.", 'body': 'Using "Go To Symbol..." (⇧⌘O) it seems to only recognize certain ways of declaring functions in javascript.\n\n<img width="607" alt="screen shot 2015-11-18 at 5 49 37 pm" src="https://cloud.githubusercontent.com/assets/1890516/11258194/d1923174-8e1c-11e5-9b2e-a17ba30a97bc.png">\n\nAll three functions should show up when you search "searchable", right? Only "searchable" and "alsoSearchable" show up however.\n\nIn this case it looks like these cases work:\n1. Anonymous function assigned as a property on and object when the object is instantiated.\n2. Named function assigned as a property on an object after it\'s instantiated.\n\nAnd this case doesn\'t work:\n1. Anonymous function assigned as a property on an object after it\'s already been instantiated.\n\nThis works in Sublime Text and I\'d love if it could work in VS Code as well as it\'s one of the main ways I navigate my javascript code (especially the thousands of lines of code for my game).\n'}, {'title': 'Mac Omnisharp Error on RC1', 'body': "Hey Guys im getting the following error in omnisharp Log it looks like its looking for the runtime in the wrong folder. \n\nCould not find any CSX files\n[ERROR:OmniSharp.Dnx.DnxPaths] The specified runtime path '1.0.0-rc1-final' does not exist. Searched locations /Users/franzsilva/.dnx/runtimes/dnx-mono.1.0.0-rc1-final\n/Users/franzsilva/.dnx/runtimes/kre-mono.1.0.0-rc1-final\n/Users/franzsilva/.dnx/packages/KRE-Mono.1.0.0-rc1-final\n/Users/franzsilva/.k/runtimes/dnx-mono.1.0.0-rc1-final\n/Users/franzsilva/.k/runtimes/kre-mono.1.0.0-rc1-final\n/Users/franzsilva/.k/packages/KRE-Mono.1.0.0-rc1-final\n/Users/franzsilva/.kre/runtimes/dnx-mono.1.0.0-rc1-final\n/Users/franzsilva/.kre/runtimes/kre-mono.1.0.0-rc1-final\n/Users/franzsilva/.kre/packages/KRE-Mono.1.0.0-rc1-final\n"}, {'title': 'Provide option to opt out of line ending normalisation for files', 'body': "Upon saving a file edited with VS Code, it appears to perform line ending normalisation automatically and without user notification of any sort. Because of this, I've found myself bitten by large diffs in Git (I'm aware you can circumvent this using the `-w` flag) where a trivial fix to a single line of source code appears to affect a significant proportion of the file, which makes pull requests and reviews for such changes on GitHub a pain to sift through. Then again, I guess one could argue why a source file with mixed line endings should stay in version control like that anyway!\n\nVisual Studio Community displays a prompt upon opening a file if it has mixed line endings and lets a user decide whether or not to have it fixed.\n\n![](http://i.imgur.com/bp9voln.png)\n\n**Version:** 0.10.1\n\n(By the way, great work on open sourcing VS Code too, thanks!)\n"}, {'title': 'build fails on Windows', 'body': 'Following the [build directions](https://github.com/Microsoft/vscode/wiki/How-to-Contribute), `scripts\\npm install` fails in the `"postinstall": "npm --prefix extensions/csharp-o/ install extensions/csharp-o/"` step.\n\n[npm-debug.log](https://github.com/Microsoft/vscode/files/38462/npm-debug.log.txt)\n'}, {'title': 'Unclosed Single/Double Quotes in Template Strings Break Syntax Highlighting', 'body': 'If you use one single or double quote without closing it, syntax highlighting breaks (even with ES6 enabled as the target). Heres\' an example:\n\n![screen shot 2015-11-18 at 7 29 37 pm](https://cloud.githubusercontent.com/assets/6439050/11258829/bc70aaf6-8e2a-11e5-9a85-14a30811eb61.png)\n\nMy `jsconfig.json`:\n\n```\n{\n  "compilerOptions": {\n    "target": "ES6"\n  }\n}\n```\n\n**Edit**: In retrospect this may simply be that template strings _aren\'t_ highlighted, which causes this weird behavior.\n'}, {'title': '[angular] Syntax highlight for inline HTML templates', 'body': 'It would be really cool if there was syntax highlighting and autocompletion for inline HTML templates\n\nVS Code:\n![image](https://cloud.githubusercontent.com/assets/1758655/11259454/6b924c24-8ead-11e5-9443-22c701f61e74.png)\n\nIDEA:\n![image](https://cloud.githubusercontent.com/assets/1758655/11259486/a80378ae-8ead-11e5-9814-b2533fb737d7.png)\n'}, {'title': '[less] mixins "{ expected" errors', 'body': 'When editing a **.less** file unexpected errors show when working with mixins. The error text is `{ expected`. These errors show when using a mixin without wrapping it in a CSS selector or when using a mixin in a media query. \n\nTo reproduce take an example from lesscss.org.\nhttp://lesscss.org/features/#loops-feature\nhttp://codepen.io/anon/pen/EjqwNr?editors=010\n\nThe Codepen contains code that can be used to replicate `{ expected` errors in Visual Studio Code 0.10.1. In Codepen no errors are shown and the code compiles fine. If this code is put into a **.less** file in Visual Studio Code 0.10.1 you will see the errors on lines 8 and 11. The image below shows the red squiggles signifying the _"errors"_ in the code.\n\n![screen shot 2015-11-18 at 6 09 04 pm](https://cloud.githubusercontent.com/assets/1514172/11259540/9f7a5272-8e1f-11e5-965f-4d035ea70c8e.png)\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwQ8jw==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Add Symbol navigation for PHP ', 'body': "would you please add support for PHP symbol navigation ? \n\nI like the symbol navigation for js, just press CTRL+SHIFT+O\nThe symbol list will show to us\n\nthat's amazing\n"}, {'title': '[javascript] Bring back ES6 syntax highlighting support', 'body': 'Right now, those keywords like `import` `class` `from` are all plain white.\n'}, {'title': 'Missing release script', 'body': 'I was looking for your release script for reference, but all there is is a devDependency for [atom-shell-installer-assets](https://github.com/joaomoreno/atom-shell-installer-assets). You probably have a script using squirrel, that I was interested on.\n\nMaybe you wont open source it, but why?\n'}, {'title': '代码提示功能还不行', 'body': '我用PHP，感觉代码提示功能还不行。变量提示不出来。\n跟PHPStorm比差远了。\n这东东感觉现在还是个实验品。不可取。\n'}, {'title': 'Error with unresolved dependencies', 'body': 'Error with creating a new app and editing it in visual studio code. Dnu restore runs fine in the command line, but won\'t run when the editor prompts me. The error I am getting is /Users/colanconnon/Desktop/HelloAspNet\' ; /Users/colanconnon/.k/runtimes/kre-mono.1.0.0-beta3/bin/dnu restore\n-bash: /Users/colanconnon/.k/runtimes/kre-mono.1.0.0-beta3/bin/dnu: No such file or directory\n\n![screen shot 2015-11-18 at 9 49 47 pm](https://cloud.githubusercontent.com/assets/6674648/11261053/e5211882-8e3e-11e5-8d1b-deaf8c2e951e.png)\n\n<img width="682" alt="screen shot 2015-11-18 at 9 50 18 pm" src="https://cloud.githubusercontent.com/assets/6674648/11261055/e9fde6f0-8e3e-11e5-83be-f904012aaf85.png">\n\n<img width="682" alt="screen shot 2015-11-18 at 9 53 13 pm" src="https://cloud.githubusercontent.com/assets/6674648/11261058/f8744012-8e3e-11e5-8414-8d89d0c4102a.png">\n\nApplication runs fine when doing dnx web. The error appears to be that VS Code is trying to install the dependencies in an old runtime, which I have uninstalled. \n'}, {'title': 'install golang plugin failed', 'body': 'Operating System: windows 10 x64\nTwo problems:\n1. remind me "The \'godef\' command is not available. Use \'go get -u github.com/rogpeppe/godef\' to install.“ at the top.  However, godef.exe is already under %PATH%\n2. Remind me "Analysis tools missing"  at the right bottom. If i click it, a remind on top "Some Go analysis tools are missing from your GOPATH. Would you like to install them?" comes out; choose "install", an empty page with title ”Output for \'Go\'" comes out, and nothing happens then\n'}, {'title': 'Menus not responsive on Windows 10', 'body': "So I created a fresh Windows 10 VM today to try out the Beta.  However, the application is sluggish to open which isn't a big deal but I never noticed it before.  The problem is that the menus are not working.  They will appear on clicking on the menu bar, but selecting a menu item does nothing.  If I try to open a project folder from the explorer VSCode opens but the folder does not.  I have restarted and reinstalled with a fresh download of the installer.  Am I the only one who is seeing this?\n"}, {'title': 'Crush if dragging a large file to open', 'body': '![image](https://cloud.githubusercontent.com/assets/1896620/11261236/87592644-8ead-11e5-9c29-246b3d7aa922.png)\n'}, {'title': 'JSX language support - more than colors', 'body': "I know VSCode has not support JSX yet but it didn't appear so much error highlights in the last version, even I had already changed my language mode into `Plain Text`.\n![2](https://cloud.githubusercontent.com/assets/6079112/11261584/f5e2e9d0-8eb0-11e5-8388-e6711dc718f9.PNG)\n"}, {'title': 'Can VS code will support more theme or theme package?', 'body': 'Can VS code will support more theme or theme package?Now it looks ugly!\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwR-lg==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': "'omnisharp:fixscripts' errored  ReferenceError: Promise is not defined", 'body': "Environment is Fedora 22 x86-64 Python 2.7.10\n\ndownload and unpack 0.10.1 source code\n\n```\ncd ~/tmp/vscode-0.10.1\nsudo npm install -g mocha gulp\n./scripts/npm.sh install --arch=x64\n```\n\nthen you'll get into this error after a few minutes\n\n```\n> csharp-o@0.1.0 postinstall /home/dove/tmp/vscode-0.10.1/extensions/csharp-o\n> node ./node_modules/gulp/bin/gulp.js omnisharp\n\n[11:45:17] Using gulpfile /home/dove/tmp/vscode-0.10.1/extensions/csharp-o/gulpfile.js\n[11:45:17] Starting 'omnisharp:clean'...\n[11:45:17] Finished 'omnisharp:clean' after 5.84 ms\n[11:45:17] Starting 'omnisharp:fetch'...\n[gulp] Downloading https://github.com/OmniSharp/omnisharp-roslyn/releases/download/v1.5.6/omnisharp.tar.gz... 1% 4% 17% 48% 71% 97% Done\n[11:45:27] Finished 'omnisharp:fetch' after 10 s\n[11:45:27] Starting 'omnisharp:fixscripts'...\n[11:45:27] 'omnisharp:fixscripts' errored after 174 μs\n[11:45:27] ReferenceError: Promise is not defined\n    at /home/dove/tmp/vscode-0.10.1/extensions/csharp-o/gulpfile.js:40:14\n    at Array.map (native)\n    at Gulp.<anonymous> (/home/dove/tmp/vscode-0.10.1/extensions/csharp-o/gulpfile.js:39:37)\n    at module.exports (/home/dove/tmp/vscode-0.10.1/extensions/csharp-o/node_modules/gulp/node_modules/orchestrator/lib/runTask.js:34:7)\n    at Gulp.Orchestrator._runTask (/home/dove/tmp/vscode-0.10.1/extensions/csharp-o/node_modules/gulp/node_modules/orchestrator/index.js:273:3)\n    at Gulp.Orchestrator._runStep (/home/dove/tmp/vscode-0.10.1/extensions/csharp-o/node_modules/gulp/node_modules/orchestrator/index.js:214:10)\n    at /home/dove/tmp/vscode-0.10.1/extensions/csharp-o/node_modules/gulp/node_modules/orchestrator/index.js:279:18\n    at finish (/home/dove/tmp/vscode-0.10.1/extensions/csharp-o/node_modules/gulp/node_modules/orchestrator/lib/runTask.js:21:8)\n    at /home/dove/tmp/vscode-0.10.1/extensions/csharp-o/node_modules/gulp/node_modules/orchestrator/lib/runTask.js:52:4\n    at f (/home/dove/tmp/vscode-0.10.1/extensions/csharp-o/node_modules/gulp/node_modules/orchestrator/node_modules/end-of-stream/node_modules/once/once.js:17:25)\nnpm ERR! weird error 1\nnpm ERR! not ok code 0\nnpm ERR! weird error 1\nnpm ERR! not ok code 0\n\n\n```\n"}, {'title': 'Request feature "Integrated terminal"', 'body': 'It would be great if vscode has integrated terminal feature refer vim or atom https://atom.io/packages/term3  \n\nI saw this suggestion pending in uservoice(https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7752357-integrated-terminal) and repost here since it has specific repo \n'}, {'title': "TextEdit[] returned from provideDocumentFormattingEdits doesn't behave correctly?", 'body': 'I\'m trying to determine the root cause of https://github.com/Microsoft/vscode-go/issues/16, but I don\'t see any problem with the TextEdit object I\'m providing back to the `provideDocumentFormattingEdits`.  It seems that in some cases Code will corrupt the buffer in odd but deterministic ways.  \n\nI haven\'t been able to pin down the exact incorrect behaviour, but two example:\n\n_Example 1_\nBefore text: \n\n```\npackage caddy\\n\\nfunc main() {\\n\\tfmt.Println("Hello World! :)")\\n}\\n\n```\n\nThen replace the full range with:\n\n```\npackage caddy\\n\\nimport "fmt"\\n\\nfunc main() {\\n\\tfmt.Println("Hello World! :)")\\n}\\n\n```\n\nThe result will be \n\n```\npackage caddyimport "fmt"func main() {\\n\\tfmt.Println("Hello World! :)")\\n}\\n\n```\n\n_Example 2_\nBefore text: \n\n```\npackage caddy\\n\\nfunc main() {\\n    fmt.Println("Hello World! :)")\\n}\\n\n```\n\nThen replace the full range with:\n\n```\npackage caddy\\n\\nimport "fmt"\\n\\nfunc main() {\\n\\tfmt.Println("Hello World! :)")\\n}\\n\n```\n\nThe result will be \n\n```\npackage caddy\\n\\nimport "fmt"\\n\\nfunc main() {\\n\\tfmt.Println("Hello World! :)")\\n}\\n\n```\n\nNote that the only difference between these examples is the `"\\t"` vs `"    "` in the original text.  The result in Example 1 has corruption in the string result in a seemingly random location.\n\nTwo question:\n1. Is this a bug in the extension API, or am I somehow calling it wrong?\n2. If it\'s a bug, is there any workaround?\n'}, {'title': 'Bad Default/Regression: C++ .h headers colored as C files', 'body': "The new syntax highlighting in **0.10.0** is great-ish but it seems to have broken all **.h** files in a C++ project as they are defaulted to C syntax which is missing all C++ keywords.\n\n![image](https://cloud.githubusercontent.com/assets/178878/11263299/73207fac-8e57-11e5-9679-b264f538fe51.png)\n\nThe vast majority of C++ projects I've worked on or encountered here on Github use .h for their header files and not **.hpp**, **.hh**, or **.hxx**. Even Microsoft-shipped C++ include headers are all **.h**.\n\nSince I cannot change the extensions of my files in any reasonably mature C++ project, I'm left with either modifying the VS Code root installation cpp extension or manually change the syntax highlighting to C++ every time I open a **.h** file. Both of these solutions are not ideal, especially since this was NOT a problem in earlier versions of VS Code.\n"}, {'title': 'How to install plugins!!', 'body': 'Such as editor plugins : Emmet!! ,jsformat l\n\ntheme !!!\n\nthanks~~\n'}, {'title': 'Developer Tools: node.js api error', 'body': "![vsc](https://cloud.githubusercontent.com/assets/5064875/11263530/7c7b489c-8ec6-11e5-8f8b-256393615126.png)\n\nsome node.js modules are not supported in vs code.\n\n![atom](http://sfault-image.b0.upaiyun.com/235/097/235097771-564d697c10ea7_articlex)\n\nit's ok in atom, i was used to check node.js apis by this way.\n"}, {'title': '[c++] C++ syntax highlighting inconsistent in 0.10.0', 'body': "The Improved Syntax Highlighting in 0.10.0 is nice in that it does more than a simple keyword match and comment detection. However, it seems to produce inconsistent colouring for C++ files.\n\nAll themes below use the default Dark theme that comes with VSCode and Visual Studio 2015. The default Light theme has the same problems. Actually, all themes I tried have the same inconsistencies except of course the colours themselves are different.\n## The Problem\n\nVSCode 0.10.0:\n![image](https://cloud.githubusercontent.com/assets/178878/11263547/a7647352-8e59-11e5-90d3-41cf8d5be643.png)\n\nSome specific concerns/issues:\n1. Why is the `#include` and `#define` **pink**? I _really_ hope this is not a new direction for the default VS Dark theme.\n2. Why are the `if`, `return`, and `else` keywords **pink** but the `int`, `namespace`, and `class` keywords the good-old-VS **blue**?\n3. Why are function names like `main()` and `do_stuff()` **yellow**, while their use **orange**?\n4. Why are class names like `Foo` and namespace names like `space` using keyword **blue** colour?\n## For Reference\n\nVSCode 0.9 and below (it was simpler but at least it was consistent):\n![image](https://cloud.githubusercontent.com/assets/178878/11263559/c61f1c34-8e59-11e5-83eb-070cfe597ecb.png)\n\nVisual Studio 2015 (obviously can infer more about the language but this is what I'd expect from the default Dark theme):\n![image](https://cloud.githubusercontent.com/assets/178878/11263567/dbe8445a-8e59-11e5-9c17-b7ffff63d2d5.png)\n"}, {'title': 'output window - crashes under load.', 'body': 'Hi\n\nWhen configuring the vscode task runner for `"showOutput": "always"`, I note the output window may become overwhelmed if the process emits large amounts of text/data. This results in the application becoming unresponsive and requiring a restart.\n\nIs it possible to buffer any output from a process and page it gracefully to the output window?\n\nMany Thanks\n'}, {'title': 'Feature request: more complete git integration', 'body': "I've tried out this new editor and find it very promising. Looking at the git integration, here's a list of features that would add a ton of usefulness if being integrated into the git screen: (I hope I didn't overlook something)\n- add `git pull --rebase` additionally to `git pull`\n- add keyboard shortcuts and (easy reachable) buttons to quickly `stage` and `unstage` `lines` and `chunks` in `diff view`\n- add `git log`, `project` wise, `branch` wise and `file` wise with easy to view commit `file changes`\n"}, {'title': 'Support undo and redo in input fields', 'body': 'How to reproduce the bug:\n1. Open a text file;\n2. Edit something in the file;\n3. Use Cmd+F to activate the search box on the top right;\n4. Type a keyword you want to search in the box;\n5. Change the keyword in the box; (e.g., add a character to the keyword)\n5. Use Cmd+Z to undo;\n6. You will notice that Visual Studio Code actually undos the text file edit, not the search keyword edit.\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwTE8A==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Global Typings?', 'body': "Can one add global typings? i.e a global 'JQuery typing': non-single-project based.\n"}, {'title': 'When can support Razor IntelliSense in ASP.NET 5?', 'body': 'When can support Razor IntelliSense in ASP.NET 5\n'}, {'title': 'Changes to Emmet snippets.json lost after update', 'body': '自己修改了emmet的snippets，更新后snippets被覆盖了，还要自己重新修改一下，是不是也能像settings那样加写自己的设置比较好？\n'}, {'title': 'How to install plugins behind a proxy with a self-signed certificate?', 'body': 'I\'m using vs code behind a proxy with a self-signed certificate, when i try to install plugins and typing "ext install ", it shows an error "unable to verify the first certificate".\n'}, {'title': 'Find symbols, find references, format code does not work on Ubuntu 15.04', 'body': 'I am still using 0.8.0 and these things works fine on this version. However, all the releases after it does not work properly.\n\nKudos to whole team for creating a fast editor that works cross platform. \n'}, {'title': 'The 0.10.1 update cover the file what I edited the snippets.json in the Emmet. So I need to edit it again. Is it can improve?', 'body': 'The 0.10.1 update cover the file what I edited the snippets.json in the Emmet. So I need to edit it again. Is it can improve?\n'}, {'title': 'Snippet variables not detected after double backslash', 'body': 'In a LaTeX snippet, it is not possible to declare a variable after a double backslash.\nExample:\n\n``` json\n    "section": {\n        "prefix": "sec",\n        "body": [\n            "\\\\${1:sub}section${2:*}{${3:label}}",\n            "\\n\\t$4"\n        ],\n        "description": "Start a subsection"\n    }\n```\n\nexpands to\n\n``` tex\n    \\${1:sub}section*{label}\n```\n'}, {'title': 'Bring Code window to foreground when opening a file from the command line and reusing existing window', 'body': 'Currently (on Windows) when you open a file via command line with _--reuse-window_ the file is opened but Code just flashes its icon on the taskbar staying in background. \nPlease consider adding a commandline option --bring-to-front or bring Code window to front regardless when  file is opened from the command line.\n\n//VS Code 0.10.1 on Windows 7 Professional SP1\n'}, {'title': 'Visual Studio Code is no longer responding', 'body': 'Sometimes editor just freeze. Kill task helps only. Have this problem at work and home.\nI noticed that this started after latest update (0.10.1).\n\nWorking in PHP files.\n\nWindows 10 64.\n'}, {'title': '[php] missing user code auto-complete on 0.10.1', 'body': 'When writing PHP code VSCode worked well completing user variables beginning with a $ sign or completing user functions. That worked in 0.9.1 but is missing in 0.10.1 - now only PHP built-in code completions are shown.\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwTsHQ==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Typing in the editor is very laggy on Linux', 'body': "Since the 0.10.1 update, typing anything in the editor is very laggy: characters appear with about 0.5 seconds delay and almost never in the same order I actually typed them on the keyboard.\n\nPossibly related: scrolling to the top of a file in the editor triggers a slower top-down refresh of the contents that apper in the editor. I actually see how the code is refreshed like in a bitmap, line by line, pixel-wise.\n\nI'm using Ubuntu Linux 15.10. This problem didn't occur with previous Visual Studio Code updates.\n\nLater edit: I've tested it again on the same computer, but on a 15 inch screen and it works ok, without any lag when typing. Only when Visual Studio Code is on a 24 inch monitor the typing is lagging.\n"}, {'title': 'Show the application window as soon as possible', 'body': 'We can do this for the light theme, but for dark theme you see a white background for a short time and so we hide the window until we have DOM access to set the background color.\n\nhttps://github.com/atom/atom-shell/issues/861\n'}, {'title': 'Better drag and drop / clipboard integration of files across applications', 'body': 'This includes being able to drag files and folders from VS Code into other applications as well as to being able to copy a file or folder to the native clipboard.\r\n\r\n**Specifically:**\r\n* [ ] copy files/folders from VS Code file explorer to clipboard and paste into native OS explorer\r\n* [x] copy files/folders from native OS explorer and paste into VS Code file explorer (https://github.com/microsoft/vscode/issues/130036)\r\n* [ ] support the native file data transfer when doing drag and drop (https://github.com/atom/electron/issues/2853)\r\n* [ ] support 3rd party tools such as WinRAR to open files from an archive (https://github.com/microsoft/vscode/issues/90196)\r\n* [x] drop files to the desktop to copy them there (https://github.com/microsoft/vscode/issues/128975)'}, {'title': 'Remove dependency to atom-shell-installer-assets', 'body': 'No longer used\n'}, {'title': 'Menus wrongly positioned when using multiple monitors', 'body': "If you click on the 'File' menu when the main Code window is on the second monitor, the menu appears on the first monitor\n\nhttps://github.com/atom/atom/issues/3415\n"}, {'title': 'Windows 10: window not put to foreground in all cases', 'body': 'Sometimes the VS Code window just flashes in the task bar but is not stored to the foreground (e.g. when running code again from the command line). See https://github.com/atom/electron/issues/2867\n'}, {'title': 'Application Architecture ', 'body': 'This is very novel (paradigm shift) architecture for standard Windows desktop software.\n\nCan you please point into the direction of resources explaining the (detailed) App Architecture of VSCODE ?\n\nKind regards ...\n'}, {'title': 'Ambiguous "Cannot invoke an expression" hint', 'body': 'I was browsing my code with visual studio code beta (v0.10.1), it underlines 5. line and says "cannot invoke an expression whose type lack a call signature.". I think the code hasn\'t any problems since it\'s not an typescript project or something type-restricted. I wanted to report it if it is a bug.\n\n``` js\n                let queryMethod = isEmail ?\n                    { email: userModel.getSingleByEmail } :\n                    { username: userModel.getSingleByUsername };\n\n                queryMethod(user_)\n                    .then((userRecord) => {\n```\n\nNote: I didn\'t changed any configuration option but enabling es6 from jsconfig.json file.\n'}, {'title': '"PreLaunchTask" is not finished before the launching starts', 'body': 'I have a simple TypeScript project, and I need to generate sourcemap before debugging. \nI have a `tsc` task that does the job, and I set it as the `preLaunchTask` field for my launching configuration. However, the launch seems to be starting before the sourcemaps finished generating. \n'}, {'title': "I can't bind one key with two or more commands in keybindings.json", 'body': 'My user keybindings.json is like this:\n    [\n    {\n    "key": "ctrl+/",\n    "command": "editor.action.commentLine && cursorDown",\n    "when": "editorTextFocus" \n    }\n    ]\nBut it doesn\'t work.\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwUEMg==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Mac: Auto-update prevents to store settings of session', 'body': "Whenever I install an update (prompted by VS Code) it doesn't open the same file I had opened before.\n\nI think this is caused by a prompt process.exit() that leaves VS Code (or actually Chromium) no chance to persist the local storage to disk. It is reproducible by calling Lifecycle.quit() and from the done handler call process.exit().\n\nHave to follow up with Electron to understand this better.\n"}, {'title': 'OSX El Capitan: Code crashes on quit when in split full-screen mode', 'body': "1. Go full screen\n2. Split it with another app (eg iTerm2), El Capitan style\n3. Quit Code\n\nCrash reporter comes up. Couldn't repro with barebones Electron.\n"}, {'title': 'Syntax highlighting: Textmate grammars vs. inbuilt mechanism?', 'body': "The officially documented way to contribute syntax highlighting support for new languages seems to be by wrapping Textmate .tmlanguage grammars.\n\nI'm curious if this is also the mechanism that vscode uses to support the inbuilt languages. There also seems to be various tokenizers for those, like in https://github.com/Microsoft/vscode/blob/master/src/vs/editor/standalone-languages/csharp.ts .\n\nI'm now wondering if vscode uses two different approaches.\nIf yes, which advantages and disadvantages gives the tokenizer based approach and is it also available for extensions?\nIf no, what else is the use-case for this integrated tokenizers?\n"}, {'title': 'Diff editor: restore the action to quickly toggle between inline and normal diff', 'body': 'This is now a setting in 0.10.x making it hard to quickly toggle between the modes without changing the setting.\n'}, {'title': '"How to contribute"  docs details missing', 'body': "`npm install gulp -g` should be executed before `gulp watch`  , otherwise it will throw a error `Error: Cannot find module 'readable-stream/transform'`\n\nI found the solution in  http://stackoverflow.com/questions/24010598/node-js-cannot-find-module-readable-stream\n\nplease update your [How to contribute](https://github.com/Microsoft/vscode/wiki/How-to-Contribute) docs  :smile: \n"}, {'title': 'Crash when opening 50mb YAML file', 'body': 'Version 0.10.1\n\nAs the subject says, When I attempt to open a 55MB YAML file, VS Code crashes.\n\nOpening smaller files seems to work fine (5mb).  The larger one makes it blow up every time.\n\nLet me know if I can provide any more information.\n'}, {'title': 'Git status in File Explorer', 'body': 'Similar to what atom provides in the project explorer:\n1. New files are displayed green.\n2. Modified are displayed yellow/orange.\n3. Ignored files are displayed transparent-ish.\n\nThanks\n'}, {'title': 'Not auto complete for grammar only languages like C++, Python, CoffeeScript...', 'body': "no more auto completions? vscode doesn't give me suggestions to auto complete as I type.\n"}, {'title': 'Wrong multiline parenthesis indent (JS)', 'body': 'When formatting JavaScript the indent of right parenthesis (that is placed on different line) is too large.\nThis is expected to be\n\n``` javascript\nfunction (\n    arg1,\n    arg2\n) {\n    if (\n        arg1\n        && arg2\n    ) {\n        //...\n    }\n}\n```\n\nbut actually is\n\n``` javascript\nfunction (\n    arg1,\n    arg2\n    ) {\n    if (\n        arg1\n        && arg2\n        ) {\n        //...\n    }\n}\n```\n'}, {'title': 'Debug: click on breakpoint does not focus editor if already opened', 'body': ''}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwUZUA==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Jump to matching bracket issue', 'body': '"Jump to matching bracket" (⇧⌘]) goes to the outer side of left bracket and the inner side of right bracket. This breaks further matching. \n\nTo reproduce just issue ⇧⌘] on nested brackets starting from the most outer ones, see where the cursor ends up (goes to inner couple each time).\n'}, {'title': 'Wrong comment indent in multiline expressions (TS, JS)', 'body': 'When formatting JavaScript or TypeScript, comments placed between parts of multi-line expressions are placed wrong.\nExpected to look like\n\n``` javascript\ndoStuff()\n    .then()\n    // Comment\n    .then();\n```\n\nbut actually is\n\n``` javascript\ndoStuff()\n    .then()\n// Comment\n    .then();\n```\n'}, {'title': 'tasks not working as before', 'body': 'In vscode 9 i had setup a simple task to rsync my project to a server.\n\ntasks.json\n\n``` json\n{\n    "version": "0.1.0",\n    "command": "zsh",\n    "isShellCommand": true,\n    "args":["-c"],\n    "tasks": [\n      {\n        "taskName": "up",\n        "args": ["rsync -avicCFF --no-t --no-p --no-g ./ bastiaan@front:~/front/; echo DONE;"],\n        "isBuildCommand": true\n      }\n    ]\n}\n```\n\nIt worked perfectly, now after the update i only get \n\n```\nzsh:1: command not found: up\n```\n\nIt seems its adding the taskname as argument instead of the args array.\nWhat changed in tasks.json that this does not work anymore?\n'}, {'title': 'Tests occasionally fail spectacularly in OS X', 'body': "Recently, @aeschli and @alexandrudima did a chance which caused an NPE to happen during tests. It's possible that an uncaught exception causes a very ugly chain of errors that will simply make many tests fail. Investigate!\n"}, {'title': 'Format action in XML files deletes spaces in content', 'body': 'When you format an XML file, every group of more than one space is replaced by only one. For example, given this XML\n\n``` XML\n<?xml version="1.0" encoding="UTF-8"?><parent><child>   A   B   C   D   </child></parent>\n```\n\nafter execute `editor.action.format` action (`ctrl+shift+f` by default in Windows) the result is\n\n``` XML\n<?xml version="1.0" encoding="UTF-8"?>\n   <parent>\n      <child> A B C D </child>\n   </parent>\n```\n\nAs it shows, all the spaces inside `child` tag have been trimmed, and now data is different.\n'}, {'title': 'Goto definition acts too early in some cases', 'body': "When pressing the mouse button down then holding control and then releasing the mouse button, VS Code jumps to the definition. This should only happen if you are holding down CTRL before the mouse down.\n\nOne of the problems this causes: When selecting text and copying/cutting/pasting it via CTRL+X/C/V you have to be sure to let go of the mouse button before you press CTRL.\n\nAnother issue with CTRL is that when navigating through recent files with CTRL+TAB and you go backwards in the list via CTRL+SHIFT+TAB, but then decide you actually didn't need to go backwards: You release SHIFT and get immediately thrown into the currently selected file. I think this should only happen when letting go of CTRL in that case.\n\nIn my opinion the Jump To Definition probably shouldn't happen regardless of modifier keys pressed when you have a text selection created with that mouse action.\n\n(this was reported in https://code.visualstudio.com/issues/detail/18527, but I guess github issues are the way forward, right?!)\n"}, {'title': 'Specify which Node version is required to build VS code', 'body': 'It seems like Node v 0.10 is not supported.\n\n```\nReferenceError: Promise is not defined\n    at <path>\\vscode\\extensions\\csharp-o\\gulpfile.js:40:14\n```\n\nWould be helpful to know the minimal Node version needed.\n'}, {'title': 'Add support for font ligatures', 'body': '[Fira Code](https://github.com/tonsky/FiraCode) and [others](https://github.com/i-tu/Hasklig) are monospaced fonts that use [ligatures](https://en.wikipedia.org/wiki/Typographic_ligature) to combine multi-character symbols, e.g. `->` will result in an arrow symbol `→`. This is quite nice and [atom](https://github.com/atom/atom) supports this font feature since `1.2.0`, so it should work with vscode, too.\n'}, {'title': 'OS X: no selection occurances in scrollbar (scroll-map) after ~260 lines', 'body': 'When a text/variable is selected, its other occurances in the file are marked in the scrollbar. Unfortunately, occurrences after the first 260 lines are not shown in the scrollbar.\n\nIs this a setting or a bug?\n'}, {'title': "(JavaScript) Auto-complete for block comments doesn't work since 0.10.1", 'body': 'In previous versions of VS Code block comments have been finished after typing `/**`, which now seems not to be the case.\n\n![comments](https://cloud.githubusercontent.com/assets/9280031/11267902/56c89662-8eae-11e5-8441-ec57738f55d0.gif)\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwU2sw==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'double click into watch expression or variable jumps up a little bit', 'body': 'you basically have to move it up and down pixel by pixel until you get it right\n'}, {'title': 'Move gulpfile.* in the /build/ folder', 'body': "Would be nice if we'd have a less cluttered root folder with a single top level gulpfile.js that includes the others from the /build/ folder\n"}, {'title': '[Debug] Console HTTP links match incorrectly', 'body': "VS Code show the following output in the console:\n\n![image](https://cloud.githubusercontent.com/assets/835750/11268334/9579a9c6-8eb0-11e5-87e8-1b1a45eb932c.png)\n\nGoogle Chrome shows this one:\n\n![image](https://cloud.githubusercontent.com/assets/835750/11268351/a42f7252-8eb0-11e5-9ea7-7bd2ff67788e.png)\n\nThe source code links are not matched correctly in the VS Code, therefore when I click on the first link for example, VC Code tries to access a file on drive `p:/` which obviously doesn't exist:\n\n![image](https://cloud.githubusercontent.com/assets/835750/11268405/da189d94-8eb0-11e5-8b44-1459d0985191.png)\n"}, {'title': "Keybindings using brackets (eg. indent) doesn't work with a Danish keyboard layout on Mac OSX", 'body': 'The reason is likely that to enter these keys on the layout, you have to use the \'option\' (alt) button.\nSo in this instance, the command is effectively "Cmd+Alt+8" for Cmd+[.\nPerhaps VS Code needs better OS-support for text input (or at least for their use in keycodes).\n'}, {'title': 'Install Extension: order on extension list', 'body': "When you try to install yeoman generator with:\n`ext install yo`\nyeoman generator is last on the list but should be first\n`yo` is name of package\nwith hundreds of packages it will be pain to find.\nI know you can install it with:\n`ext install yeoman` \nbut shouldn't it prioritize package name somehow?\n\n![image](http://i.imgur.com/UAmLpOq.jpg)\n"}, {'title': 'Ability to modify the Caret/Cursor', 'body': "Is there anything, which exposes the CSS or something of the caret/cursor, so it can be modified by an extension(for example modifying the shape and color)? I searched through the API, but I couldn't find anything, which would help me with my problem. Is something available in the API atm or can it be exposed in a future release?\n"}, {'title': 'decorators in object literals not working', 'body': 'I am getting a parsing error for decorators on object literal properties. My jsconfig.json looks like this:\n\n```\n{\n    "compilerOptions": {\n        "target": "ES6",\n        "module": "commonjs",\n        "experimentalDecorators": true\n    }\n}\n```\n\nThis code compiles okay in babel 5.8.12 using the "es7.decorators" extension.\nCan I somehow make this work?\n\n![image](https://cloud.githubusercontent.com/assets/271740/11269888/3f0a1f3a-8f0a-11e5-86e8-578b7a24d60d.png)\n'}, {'title': 'Expose ISuggestions.incomplete', 'body': ''}, {'title': '[xml] Closing XML element with namespace prefix generates element without local-name', 'body': 'The auto-generation of closing XML elements is incorrect if the open XML element has a namespace prefix such as `<xsl:text>`.\n\nObserved behaviour:\n\n``` xml\n<xsl:text></xsl>\n```\n\nExpected behavior:\n\n``` xml\n<xsl:text></xsl:text>\n```\n'}, {'title': 'Integrate "gulp whitespace-style" in "gulp watch" & cont. build', 'body': "gulp whitespace-style finally reports no errors now.\n\nTo ensure we don't introduce leading whitespace mistakes again, let's integrate it in the other tasks\n"}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwV-Nw==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': 'Feature Request: Mercurial Support', 'body': '# Add VCS Mercurial Support\n- Simple file changes tracking as git.\n'}, {'title': 'Feature Request: SVN Support', 'body': '# Add VCS Subversion Support\n- Simple file changes tracking as git.\n'}, {'title': 'Remember all UI state even when reopening window without workspace', 'body': 'Currently, reopen files behaviour is slightly weird. If no folders are open, no files are reopened upon restart of VSC. If a folder is open, any files that are opened, inside the opened folder or not, are reopened upon restart of VSC.\n\nI would like to see VSC reopen files, regardless the opened folder count. Should probably be settable in the preferences, I can imagine not everyone is interested in this behaviour.\n'}, {'title': 'cannot open a txt file that use gb2312 encoding correctly on windows', 'body': 'so need click the file encoding tips on status bar and choose reopen with encoding then select gb2312 encoding.\n\nwindows version 10.\n'}, {'title': 'Git commit message input field no longer resizes', 'body': 'OS X 10.11.1\nVS Code version 0.10.1 (0.10.1)\n\nVisual bug appears when you narrowed Git sidebar.\n\n![vsbug](https://cloud.githubusercontent.com/assets/733224/11271675/42b78896-8ed0-11e5-8051-d97e8f534ea9.png)\n'}, {'title': 'Add file icons support in the explorer', 'body': 'Can you please add file icons support in the tree view?\n\nI know that access from extension to the DOM is restricted. But it will be good to add some language-id attribute to the tree-view element. For example in the [render function](https://github.com/Microsoft/vscode/blob/master/src/vs/base/parts/tree/browser/treeView.ts#L219). So it will be easy to modify view of files with different types with CSS, without modifying DOM.\n\nAnd also It will be nice to add possibility to add/modify directly CSS from extension.\n'}, {'title': 'Is possible to have it on Lumia 950 in near feature with .NET SDK ?', 'body': 'Is it possible to recompile for Lumia 950, and to use phone for development of .NET apps and libs?\nThat can be decision factor for buying Lumia 950\n'}, {'title': 'Debug Console has lost highlighting in ', 'body': "Don't know whether this is deliberate or not. In the previous version to 0.10 when I ran mocha tests, the output had highlighting, red, green etc.\nIn 0.10, this appears to have been lost.\n"}, {'title': 'Terminate an task by keyboard', 'body': "Actually I can start a gulp task by the shortcut [ctrl]+[shift]+[b]. Sometimes I wan't to restart this task by using this shortcut again. When I do this, a dialog is warning me because there is already a task running and it must stopped before. But to do this I have to move the mouse and this is uncomfortable. \n\nCan you create the ability to confirm this by pressing [enter] or [space]? Alternatively another shortcut for stopping the task would be great too!\n\nThis is more like a feature request - I hope it is still ok to post it here. \n\nRegards\n"}, {'title': 'Installing extension behind a firewall', 'body': 'I tried to install an extension. As I\'m currently behind a corp firewall I wasn\'t successful after a first try with **ext install**. After configuring **"http.proxy": "http://xxx.yyy.zzz:1234/"** within my global **settings.json** I was successful in loading the list of extensions. But installing one fails with the error **connect ECONNREFUSED 191.238.172.191:443**. Yes, I also configured **https.proxy** correspondingly, but it seems that this value doesn\'t get honored.\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwWzEg==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': '[grammars] provide alternative to TextMate grammars', 'body': "TextMate isn't sufficient for many languages.\n\nWe have been integrating in to the lower level, in the src/vs/languages directory and using Modes.IState and supports.TokenisationSupport. There needs to be a way of writing an extension that can do this, which at least currently there doesn't seem to be,\n\nThanks.\n"}, {'title': 'Support the ability to copy to clipboard in extensions', 'body': 'Support writing (and maybe reading) the system clipboard.\n\nWhy I need it: I want to write an extension that will take the contents of the current editor, modify it (by escaping < and >) and then copy that modified text to the clipboard. \n'}, {'title': 'Webdav network drive not work', 'body': "Hi,\n\nIt's impossible to open a folder on a Webdav Network Drive (ex : Webdav SharePoint Folder/file Access).\n\nIt work perfectly with Brackets.\n\nBye\n"}, {'title': 'Use a chat system, such as Gitter', 'body': 'Many OSS projects these days use free services like Gitter (https://gitter.im/) to provide chat channels for their projects. I think vscode would benefit greatly from a channel. It can be included in a link from the README.md file (see Diffy for an example, https://github.com/twitter/diffy).\n'}, {'title': 'Allow VS like flexibility of view layout', 'body': 'Like VS proper, I want more control over the arrangement of my workspace.\nI\'ve been using VS for almost 15 years, it\'s annoying and pointless to adapt to "everything on the left side". This is a dealbreaker for my switching while developing under linux for me.\nI want the callstack, watch, output window in a row along the bottom, not on the left.\n'}, {'title': 'stdfork does not respect stderr', 'body': "When creating a process with stdfork the stderr is not passed through.\n\nThis feature needs to be implemented in stdFork.ts and stdForkStart.js\nSimilar to what we already do for stdout, minus the waiting on the 'ready' signal\nWe also need to the cleanup similar to stdout\n"}, {'title': 'D language support', 'body': 'There is yet to appear a single excellent D-lang environment. As a long-time VS user, I would love it to be here.\n'}, {'title': 'Please provide column selection cut and paste[feature request]', 'body': ''}, {'title': 'Proper tabs for open files', 'body': 'I _really_ miss proper tabs for open files (like VS proper), and the ability to rip a tab out into its own window.\n'}, {'title': 'Crash', 'body': 'After the latest update of visual code constantly closed because of crashes.\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwXDBw==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': '[debug] console: long text must wrap, otherwise I cannot see my long values', 'body': ''}, {'title': '[sideloading] needs to happen in main thread', 'body': 'Side loading of extensions should move out of the renderer and into the shared process where we do the install of plugins.\n\n@joaomoreno just moved this bug over from tfs, we should look into it together\n'}, {'title': '[debug] Console triggers bad/blurry Chrome antialising', 'body': 'Open attached file and zoom in a lot\nMight be reproducible only on Windows\n\nInput from @alexandrudima :\n- check why are you getting a new gpu layer\n- we already had this issue in other trees and Joao discovered it was happening due to scroll bars\n- another reason for this might be the positioning (non integer coordinates) of the repl or the background. Though this one is unlikely\n\n![image](https://cloud.githubusercontent.com/assets/1926584/11272842/1cddf344-8ed0-11e5-9d52-e3ac90d25c2a.png)\n'}, {'title': 'rpm & repository for Fedora Linux', 'body': ''}, {'title': 'Getting TypeScript errors in JavaScript files', 'body': '`getTSConfig` might return a string or an object. I get a red squiggly saying that there is no common type between all return values.\n\n<img width="686" alt="screen shot 2015-11-19 at 15 23 35" src="https://cloud.githubusercontent.com/assets/22350/11273073/94ae51b0-8ed1-11e5-8085-24104973799c.png">\n'}, {'title': 'Code completion breaks snippet flow', 'body': "While using a snippet that has some variables and tab stops:\n\n``` typescript\nclass ${name} implements I${name} {\n     constructor() {\n          $1\n     }\n}\n```\n\nThe snipped flow stops after applying a suggested code completion for a variable like the ${name} above and i can't tab to $1 anymore. \n\nIs there a way i can use code completion inside a snippet flow?\n"}, {'title': 'False positive in file path pattern matching in Output Channel', 'body': '<img width="468" alt="screen shot 2015-11-13 at 3 56 51 pm" src="https://cloud.githubusercontent.com/assets/979966/11139808/877beab8-8a1f-11e5-9555-8d2d4e46edc6.png">\n'}, {'title': 'InputBox and Info|Warning|Error messages overlapping', 'body': 'When an inputbox is displaying at the same time of a message, they are overlapping.\n\n![image](https://cloud.githubusercontent.com/assets/15056200/11123547/36fe61d2-8958-11e5-8b1e-302195cb3760.png)\n\nIt would be nice to have them stack vertically in the order they appeared instead.\n'}, {'title': "Open a folder via navigation bar doesn't work in 0.10.0", 'body': 'I\'m not sure if this is the right place to file this kind of bug. I remove it when it\'s wrong here.\n\nI encountered a strange bug today using 0.10.0. I opened a huge project folder in VSCode and tried to open a subfolder via the navigation bar on the left. The triangle icon changed like the folder has been expanded but no files and subfolders appeared in the list. Even restarting VSCode didn\'t solve the problem.\nThe subfolder contains more than 1000 files and its subfolders contain more than 3000 files.\n\nI use VSCode as my default editor in a huge project so I open the project folder in VSCode everyday and edit the files. After a while the "WORKING FILES" section in the navigation bar contained far more than 100 files from within that specific subfolder. After clearing that list and restarting VSCode I could open all the subfolders again. \n'}, {'title': 'How to add icons and extra descriptions in showQuickPick', 'body': 'How could I accomplish the same visual appearance of image below, with icons at left and the extra description (blue label) at right?\n\n![gallery](https://raw.githubusercontent.com/Microsoft/vscode-extensionbuilders/master/docs/editor/images/extension-gallery/ext.png?token=ADmzMPAfiHGuT-uLjvZ0fKl1wPM1nAu6ks5WQ8qmwA%3D%3D)\n\nSomething simpler (a selectable list) is available with `vscode.window.showQuickPick`, but it only allows a `label` and a `description`, both `string`.\n\nThanks in advance\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwXfxg==', 'hasNextPage': True}}}}}{'data': {'repository': {'issues': {'nodes': [{'title': "[network] after adding a folder mapped to a SharePoint library, Code editor doesn't work (at all)", 'body': "Not sure this is the right place to ask that.\n\nDo you guys have any update on this issue?\nhttps://code.visualstudio.com/Issues/Detail/18573\n\nThis is currently a **blocker** for my SharePoint plugin, as I can't open project folders (which are network folders on SharePoint sites)\n"}, {'title': 'Is CSP enabled in @code?', 'body': 'See: https://github.com/atom/atom/pull/8697\n\nJust wondering if I can drop my CSP hacks for yeoman. :smile: \n'}, {'title': 'API: Support a multi select list', 'body': ''}, {'title': 'API: Extra events like onPreSaveTextDocument?', 'body': 'It would be nice to have some extra events I guess. The first one I can think of is `onPreSaveTextDocument` (or `onSaveTextDocument`). One that will be invoked right before the document gets saved.\n### Use Cases\n\nThe first one I can think of is my own plugin [final-newline](https://github.com/SamVerschueren/vscode-final-newline) that will insert a final newline at the end of the file when the user saves the document. At the moment it is implemented like this: <kbd>Cmd</kbd> + <kbd>s</kbd> → `Save` → `Insert newline` (if necessary) → `Save`\nThat last save triggers a new iteration of my plugin which will detect a final newline is already present and will stop the execution. So my loop is triggered twice because the plugin is triggered after the document was saved instead of before.\n\nI think there will be other file manipulation plugins that want to manipulate the file before it gets saved as well.\n\nFrom Alex:\n\nI agree some sort of onBeforeSave action is indeed needed, we just need more thinking regarding how to expose this without causing any data loss. If we block the save to wait on extensions, I can imagine it possible that the wait could be indefinite, resulting in data loss. Maybe a time ceiling of 10s, after which the file gets saved...\n\n@bpasero What do you think?\n'}, {'title': 'No intellisense on Linux for ASP .NET 5 coreclr x64 1.0.0.-rc1-final', 'body': 'Today I installed VSCode and tried this tutorial:\n\n[ASP.NET 5 Applications with VS Code](https://code.visualstudio.com/Docs/runtimes/ASPnet5)\n\nI opened Startup.cs and tried the System.Console.WriteLine sample. Intellisense did not show up. Only namespaces are shown after hitting CTRL+SPACE. It does not even recognize the built-in types like string, int, etc. .\n\nI am running VSCode on Debian 8.2 x64.\n\nDo I have to install additional components to make this work?\n'}, {'title': 'Windows: Jump list misses files and folders in the recent category when opened', 'body': 'Somehow on Windows we do not show up with files and folders in the jump list. I think this is some docs what to do to make it happen: https://msdn.microsoft.com/en-us/library/windows/desktop/ee872121(v=vs.85).aspx\n'}, {'title': 'ES6 javascript template syntax hightlighting not using string color', 'body': 'ES6 string template is shown with the same color than expresions/variables.  On 0.9.2 version, the template was using the string color (i.e. red in default light theme) allowing a good discrimination between template and placehoders expressions.\n'}, {'title': 'task runner output doesnt show color for gulp taks with --color switch arg', 'body': 'It is important to have color on the task output window to identify errors and success messagess in jasmine/karms test runner through gulp command. without this it is very hard to troubleshoot your unit test issues and identify issues in the code.\n'}, {'title': '[xml] XML Language color preference parsing degraded in latest release.', 'body': "Prior to yesterday's update, VS code coloring in XML files (specifically web.config) had more variation between various tags and values than the screenshot included.\n\n![capture](https://cloud.githubusercontent.com/assets/355561/11273523/b88f74ea-8ea1-11e5-9c5c-9e8eede4c42d.PNG)\n\nas a comparison, the syntax highlighting in XML under a light themed notepad++ window\n\n![capture](https://cloud.githubusercontent.com/assets/355561/11273814/5d758502-8ea3-11e5-916a-f422c90adea0.PNG)\n\nIs a lot closer to the level of highlighting we used to have in XML files.  DEFAULT TAGS were one color, attributes another, values a third.\n\nPerhaps something broke in XML language parsing?\n"}, {'title': 'support for "complex" data types in C', 'body': 'The C standards from 1999 and on include native complex types (float, double) - this are used by many scientific, currently forced to work on linux and other platforms which support the standard which VC to date has not. Native support for these types would be much appreciated...\n'}], 'pageInfo': {'endCursor': 'Y3Vyc29yOnYyOpHOBwX-Lw==', 'hasNextPage': True}}}}}